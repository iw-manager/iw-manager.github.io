{"version":3,"sources":["Services/Management/Models/WidgetAudiences.ts","Components/ErrorAlert/ErrorAlert.tsx","Components/Loader/Styles.ts","Components/Loader/Loader.tsx","Result.ts","Localization/Strings.ts","Services/Management/validateImageAsync.ts","Services/Storage/MemoryStorage.ts","Config.ts","Services/Storage/getStorageItem.ts","Services/Http/sendRequestAsync.ts","Services/Authorization/getUserCredentials.ts","Services/Authorization/Models/CredentialsStorageKey.ts","Services/Http/sendJsonRequestAsync.ts","Services/GitHub/extractCountryName.ts","Services/GitHub/Models/RepositoryNamePrefix.ts","Services/GitHub/Models/ApiRoot.ts","Services/GitHub/fetchRepositoriesAsync.ts","Services/GitHub/isValidRepository.ts","Services/GitHub/Models/RepositoryOwner.ts","Services/Storage/setStorageItem.ts","Services/Authorization/loginAsync.ts","Services/Authorization/setUserCredentials.ts","Services/GitHub/setRepositories.ts","Services/GitHub/Models/RepositoriesStorageKey.ts","Pages/Login/Login.tsx","Pages/PickRepository/PickRepository.tsx","Services/GitHub/getRepositories.ts","Pages/Start/Start.tsx","Components/Divider/Styles.ts","Components/Divider/Divider.tsx","Hooks/useConfirmResult.ts","Services/Management/getLanguages.ts","Services/Management/createWidget.ts","Hooks/useMultilangString.ts","Services/Management/getMultilangStringValue.ts","Services/Management/getEnvironments.ts","Components/WidgetCopier/WidgetCopier.tsx","Services/Management/validateWidgetAsync.ts","Services/Management/arrayBufferToBase64.ts","Components/DatePicker/DatePicker.tsx","Components/WidgetManagerMultilangField/WidgetManagerMultilangField.tsx","Components/WidgetManager/Styles.ts","Components/WidgetManager/WidgetManager.tsx","Services/Management/convertImageToBase64Async.ts","Components/Widget/Styles.ts","Components/Widget/Widget.tsx","Components/Environment/Styles.ts","Components/Environment/Environment.tsx","Extensions/DateExtensions.ts","Extensions/JsonExtensions.ts","Hooks/useRouteParameter.ts","Services/GitHub/fetchFilesAsync.ts","Services/GitHub/getRepositoryName.ts","Services/Management/getEnvironmentJsonFileName.ts","Services/Management/loadCountryDataAsync.ts","Services/GitHub/persistFileAsync.ts","Services/Management/publishEnvironmentChangesAsync.ts","Services/GitHub/createReleaseAsync.ts","Pages/ManageCountry/Styles.ts","Pages/ManageCountry/ManageCountry.tsx","Components/Navigation/Navigation.tsx","Components/Theme.tsx","App.tsx","Extensions/ArrayExtensions.ts","serviceWorker.ts","index.tsx"],"names":["WidgetAudiences","ErrorAlert","props","isNil","error","Grid","item","Alert","severity","useStyles","makeStyles","theme","backdrop","zIndex","modal","Loader","styles","Backdrop","className","open","visible","CircularProgress","Result","promise","context","_promise","_context","this","timeout","then","value","Promise","resolve","setTimeout","condition","Error","call","reject","ensurer","onSuccess","Ok","Fail","onFailure","_","run","action","execute","ignorePromiseError","arg","catch","prevPromise","errorMessage","message","compensatedValue","void","onFailureCompensate","isExecuted","newError","factory","runAsResult","argument","actionResult","asPromise","undefined","Void","delay","results","promises","map","result","all","factories","joinedResult","forEach","items","concat","isSuccess","times","retryResultAction","retryInternal","FromPromise","retriedTimes","Strings","LocalizedStrings","en","loginTitle","userName","pat","instructions","login","loginFailed","noRepositoriesAvailable","pickRepository","startEditing","somethingWentWrong","save","cancel","title","description","edit","manageWidget","image","removeImage","moreButton","link","audience","availability","fromDate","tillDate","copy","copyWidget","deleteWidget","imageIsNotValid","someFieldsAreEmpty","dateRangeIsInvalid","createWidget","revertChanges","areYouSureToRevert","areYouSureToPublish","publishChanges","areYouSureToDeleteWidget","successfullyPublished","pngImagesOnly","MemoryStorage","Map","Config","version","debug","debugDataKey","debugCountryKey","countries","name","languages","environments","getStorageItem","key","get","localStorage","getItem","removeItem","sendRequestAsync","request","headers","getHeaders","params","method","mode","body","useJsonContentType","JSON","stringify","url","getUrl","path","queryParams","fetch","response","status","ignoreCacheControl","Date","toLocaleString","useAuthorization","createQueryString","keyValues","Object","keys","filter","join","sendJsonRequestAsync","json","extractCountryName","repositoryName","loweredRepositoryName","toLowerCase","t","find","substr","length","toUpperCase","ApiRoot","fetchRepositoriesAsync","repositories","owner","setStorageItem","setItem","set","loginAsync","username","password","btoa","setUserCredentials","withOverridenError","ensure","setRepositories","Login","history","useHistory","useState","isLoading","setIsLoading","setError","setUsername","setPassword","onLogin","useCallback","replace","onBoth","Typography","Dialog","DialogTitle","DialogContent","dividers","container","spacing","direction","TextField","autoFocus","fullWidth","required","label","type","onChange","e","target","DialogActions","Link","href","Button","variant","color","onClick","PickRepository","selectedRepository","setSelectedRepository","useEffect","onSelectRepository","onStartEditing","maybeCountry","RadioGroup","option","FormControlLabel","control","Radio","Start","onCompleted","push","marginTop","marginBottom","Divider","useConfirmResult","confirm","useConfirm","getLanguages","country","createMultilangString","imageUrl","button","langs","reduce","obj","lang","assign","useMultilangString","string","useMemo","defaultLang","values","getMultilangStringValue","getEnvironments","WidgetCopier","onCopy","selectedEnvironment","setSelectedEnvironment","onCopyInner","maxWidth","Select","environemnt","MenuItem","onCancel","validateWidgetAsync","widget","blob","img","Image","src","window","URL","createObjectURL","onload","width","height","onerror","validateImageAsync","allValuesFilled","moment","isBefore","object","every","arrayBufferToBase64","buffer","binary","slice","Uint8Array","b","String","fromCharCode","DatePicker","utils","MomentUtils","inputVariant","placeholder","margin","format","date","toDate","invalidDateMessage","maxDateMessage","minDateMessage","clearable","WidgetManagerMultilangField","language","fileUploadContainer","flex","WidgetManager","onSave","onDelete","openCounter","setOpenCounter","workingCopy","setWorkingCopy","imageSource","setImageSource","imageBase64","setImageBase64","confirmAsync","merge","onUpdate","onRemoveImage","onAddImage","files","shortid","generate","reader","FileReader","readAsArrayBuffer","convertImageToBase64Async","base64","onSaveInner","onDeleteInner","alignContent","justify","alignItems","accept","wrapper","marginRight","backgroundColor","borderRadius","backgroundSize","backgroundPosition","contentContainer","padding","textAlign","textDecoration","actionsContainer","minHeight","containerInactive","opacity","Widget","onChanged","buttonTitle","backgroundImage","availabilityString","utc","isActive","current","isSameOrAfter","isSameOrBefore","containerClass","isManagementOpen","setIsManagementOpen","isCopyOpen","setIsCopyOpen","env","useHover","isHover","hoverProps","Box","style","gutterBottom","environment","widgetsContainer","display","overflowX","overflowY","headerContainer","Environment","snackbar","useSnackbar","onCreateWidget","onRevertChanges","onCopyWidget","onDeleteWidget","onWidgetChanged","onWidgetReordered","onPublishChangesAsync","isWidgetCreationOpen","setIsWidgetCreationOpen","createdWidget","setCreatedWidget","widgetToIdMap","onTriggerCreateWidget","onCreateWidgetInner","getWidgetId","v4","onWidgetReorderedInner","destination","source","index","onRevertChangesInner","onPublishInner","showMessage","hasChanges","onDragEnd","droppableId","provided","ref","innerRef","droppableProps","widgets","draggableId","draggableProps","dragHandleProps","imageUrlToBase64Map","image64","prototype","toJSON","parseLegacy","parse","parseJsonWithDates","text","reviver","parseDate","fetchFilesAsync","getRepositoryName","getEnvironmentJsonFileName","downloadEnvironmentAsync","repository","content","split","downloadRawTextFileAsync","download_url","downloadEnvironmentImagesAsync","sha","convertMapToKeyValueObj","Array","from","imagesInUseSet","add","Set","imagesContent","has","Combine","downloadRawBase64FileAsync","file","downloadedImages","arrayBuffer","persistFileAsync","base64Content","publishEnvironmentChangesAsync","publishedEnvironment","newImages","imagesUrlToShaMap","environmentSha","tag_name","unix","createReleaseAsync","withOverridenValue","ManageCountry","match","useRouteMatch","useRouteParameter","data","setData","lastPublishedData","setLastPublishedData","newData","environmentFileNames","environmentToDataMap","some","x","environemntFiles","compactMap","loadCountryDataAsync","applyEnvironmentChange","widgetPusher","newValue","environmentIndex","widgetIndex","unshift","splice","to","move","lastPublishedEnvironment","onPublishChanges","publishedEnv","newSha","Navigation","isStarted","setIsStarted","component","exact","Theme","createMuiTheme","App","SnackbarProps","autoHideDuration","anchorOrigin","vertical","horizontal","CssBaseline","predicate","checkForNilOnly","newItem","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.85f1d2b7.chunk.js","sourcesContent":["export enum WidgetAudiences {\n    broadband = \"BROADBAND\",\n    mobile = \"MOBILE\",\n    all = \"ALL\",\n}","import { Grid } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport { isNil } from 'lodash';\nimport React, { Fragment } from \"react\";\nimport { Maybe } from \"src/Types/Maybe\";\n\ntype ErrorAlertPropsType = {\n    error: Maybe<string>,\n}\n\nexport const ErrorAlert = (props: ErrorAlertPropsType) => {\n    return (\n        <Fragment>\n            {!isNil(props.error) &&\n                <Grid item>\n                    <Alert severity=\"error\">{props.error}</Alert>\n                </Grid>\n            }\n        </Fragment>\n    )\n}","import { makeStyles } from \"@material-ui/core/styles\"\n\nexport const useStyles = makeStyles(theme => ({\n    backdrop: {\n        zIndex: theme.zIndex.modal + 1,\n    }\n}));","import { Backdrop, CircularProgress } from '@material-ui/core';\nimport React, { Fragment } from 'react';\nimport { useStyles } from './Styles';\n\ntype LoaderPropsType = {\n    visible: boolean;\n}\n\nexport const Loader = (props: LoaderPropsType) => {\n    const styles = useStyles();\n\n    return (\n        <Fragment>\n            <Backdrop className={styles.backdrop} open={props.visible}>\n                <CircularProgress />\n            </Backdrop>\n        </Fragment>\n    )\n}","export type ResultActionType<T, V> = (arg: T) => (V | Promise<V> | Result<V>);\nexport type ResultCompleteActionType<T, V> = (arg: Result<T>) => (V | Promise<V> | Result<V>);\n\nexport class Result<T> {\n    private _promise: Promise<T>;\n    private _context?: any;\n\n    constructor(promise: Promise<T>, context?: any) {\n        this._promise = promise;\n        this._context = context;\n    }\n\n    public asPromise(): Promise<T> {\n        return this._promise;\n    }\n\n    public withContext(context: any) {\n        this._context = context;\n\n        return this;\n    }\n\n    public delay(timeout: number) {\n        this._promise = this._promise\n            .then(value => new Promise(resolve => setTimeout(() => resolve(value), timeout)));\n\n        return this;\n    }\n\n    public ensure(condition: (arg: T) => boolean, error: string): Result<T> {\n        if (!error) {\n            throw Error(\"Cannot ensure condition, since error is not defined\")\n        }\n\n        this._promise = this._promise\n            .then(value => condition.call(this._context, value) ?\n                Promise.resolve(value) :\n                Promise.reject(error))\n\n        return this\n    }\n\n    public ensureAsResult(ensurer: (value: T) => Result<boolean>, error: string): Result<T> {\n        return this.onSuccess(value => ensurer(value)\n            .onSuccess(condition => condition ? Result.Ok(value) : Result.Fail<T>(error))\n            .onFailure(_ => Result.Fail<T>(error))\n            .run());\n    }\n\n    public ensureAs<V>(condition: (arg: T) => boolean, error: string, action: ResultActionType<T, V>): Result<V> {\n        return this.onSuccess(value => {\n            if (condition(value)) {\n                return this.execute(action, value);\n            }\n\n            this.ignorePromiseError();\n\n            return Result.Fail<V>(error);\n        });\n    }\n\n    public onSuccess<V>(action: ResultActionType<T, V>): Result<V> {\n        const newPromise = this._promise\n            .then(value => this.execute(action, value))\n\n        return new Result(newPromise, this._context);\n    }\n\n    public onSuccessWhen(condition: (arg: T) => boolean, action: ResultActionType<T, T>): Result<T> {\n        return this.onSuccess(arg => !!!condition(arg) ? arg : action(arg));\n    }\n\n    public onFailure(action: (arg: string) => void): Result<T> {\n        this._promise = this._promise\n            .catch(error => {\n                action.call(this._context, error);\n\n                throw error;\n            });\n\n        return this;\n    }\n\n    public onFailureCompensate(action: ResultActionType<string, T>): Result<T> {\n        const prevPromise = this._promise;\n\n        const newPromise = new Promise<T>((resolve, reject) => {\n            prevPromise\n                .then(value => resolve(value))\n                .catch(error => {\n                    let errorMessage = `${error}`;\n\n                    if (error instanceof Error) {\n                        errorMessage = error.message;\n                    }\n\n                    return this.execute(action, errorMessage)\n                        .then(compensatedValue => resolve(compensatedValue))\n                        .catch(error => reject(error))\n                });\n        });\n\n        return new Result(newPromise, this._context);\n    }\n\n    public recover(): Result<void> {\n        return this.void.onFailureCompensate(_ => undefined);\n    }\n\n    public onBoth<V>(action: ResultCompleteActionType<T, V>): Result<V> {\n        let isExecuted = false;\n\n        return this\n            .onSuccess(_ => {\n                isExecuted = true;\n\n                return action.call(this._context, this)\n            })\n            .onFailureCompensate(error => {\n                if (!isExecuted) {\n                    return action.call(this._context, this)\n                }\n\n                return Result.Fail(error);\n            });\n    }\n\n    public withOverridenValue<V>(value: V): Result<V> {\n        return this.onSuccess(_ => Result.Ok(value));\n    }\n\n    public withOverridenError(newError: string): Result<T> {\n        return this.onFailureCompensate(_ => Result.Fail(newError, this._context));\n    }\n\n    public withProcessedError(factory: (error: string) => string): Result<T> {\n        return this.onFailureCompensate(error => Result.Fail(factory(error), this._context));\n    }\n\n    public run(): Promise<T> {\n        return this.runAsResult()._promise;\n    }\n\n    public runAsResult(): Result<T> {\n        this.ignorePromiseError();\n\n        return this;\n    }\n\n    public transformBooleanSuccess(): Result<boolean> {\n        return this\n            .onSuccess(_ => true)\n            .onFailureCompensate(_ => false);\n    }\n\n    public get void(): Result<void> {\n        return this.onSuccess(_ => undefined);\n    }\n\n    static Start(context?: any): Result<boolean> {\n        return Result.Ok(true, context);\n    }\n\n    static Ok<T>(value: T, context?: any): Result<T> {\n        return new Result(Promise.resolve(value), context);\n    }\n\n    static Void(): Result<void> {\n        return Result.Ok(undefined);\n    }\n\n    static Delay(timeout: number): Result<void> {\n        return Result.Void().delay(timeout);\n    }\n\n    static Fail<T>(error: string, context?: any): Result<T> {\n        return new Result(Promise.reject(error), context);\n    }\n\n    static FromPromise<T>(promise: Promise<T>, context?: any): Result<T> {\n        return new Result(promise, context);\n    }\n\n    static Combine<T>(results: Result<T>[]): Result<T[]> {\n        let promises = results.map(result => result.asPromise());\n\n        return new Result(Promise.all(promises));\n    }\n\n    static JoinFactories<T>(factories: (() => Result<T>)[]): Result<T[]> {\n        let joinedResult = Result.Ok<T[]>([]);\n\n        factories.forEach(factory => {\n            joinedResult = joinedResult\n                .onSuccess(items => factory().onSuccess(item => items.concat([item])));\n        });\n\n        return joinedResult;\n    }\n\n    static Create(isSuccess: Boolean, error: string, context?: any): Result<boolean> {\n        return isSuccess ?\n            Result.Ok(true, context) :\n            Result.Fail(error, context);\n    }\n\n    static Retry<T>(times: number, delay: number, retryResultAction: () => Result<T>, context?: any): Result<T> {\n        let promise = new Promise<T>((resolve, reject) => {\n            retryResultAction()\n                .onSuccess(value => resolve(value))\n                .onFailure(error => this.retryInternal(times, 0, delay, retryResultAction, error, resolve, reject))\n                .run();\n        });\n\n        return Result.FromPromise(promise, context);\n    }\n\n    static Wrap<T>(value: T | null | undefined, error: string): Result<T> {\n        return value\n            ? Result.Ok(value)\n            : Result.Fail<T>(error);\n    }\n\n    private ignorePromiseError<T>() {\n        this._promise.catch(_ => { });\n    }\n\n    private execute<T, V>(action: (input: T) => (V | Promise<V> | Result<V>), argument: T): Promise<V> {\n        this.run();\n\n        const actionResult = action.call(this._context, argument)\n\n        if (actionResult instanceof Promise) {\n            return actionResult;\n        }\n\n        if (actionResult instanceof Result) {\n            return actionResult.asPromise();\n        }\n\n        return Promise.resolve(actionResult);\n    }\n\n    private static retryInternal<T>(\n        times: number,\n        retriedTimes: number,\n        delay: number,\n        retryResultAction: () => Result<T>,\n        error: string,\n        resolve: (arg: T) => void,\n        reject: (arg: string) => void) {\n        if (times === retriedTimes) {\n            reject(error);\n\n            return;\n        }\n\n        setTimeout(() =>\n            retryResultAction()\n                .onSuccess(value => resolve(value))\n                .onFailure(_ => this.retryInternal(times, retriedTimes + 1, delay, retryResultAction, error, resolve, reject))\n                .run(),\n            delay);\n    }\n}","import LocalizedStrings from 'react-localization';\nimport { MaxHeight, MaxWidth, MinHeight, MinWidth } from 'src/Services/Management/validateImageAsync';\n\nexport const Strings = new LocalizedStrings({\n    en: {\n        loginTitle: \"Login with your GitHub credentials\",\n        userName: \"Username\",\n        pat: \"Personal access token\",\n        instructions: \"Instructions\",\n        login: \"Login\",\n        loginFailed: \"Login failed\",\n        noRepositoriesAvailable: \"No repositories available\",\n        pickRepository: \"Pick repository\",\n        startEditing: \"Start editing\",\n        somethingWentWrong: \"Something went wrong. Please, try again later\",\n        save: \"Save\",\n        cancel: \"Cancel\",\n        title: \"Title\",\n        description: \"Description\",\n        edit: \"Edit\",\n        manageWidget: \"Manage widget\",\n        image: \"Image\",\n        removeImage: \"Remove image\",\n        moreButton: \"More button\",\n        link: \"Link\",\n        audience: \"Audience\",\n        availability: \"Availability\",\n        fromDate: \"From date\",\n        tillDate: \"Till date\",\n        copy: \"Copy\",\n        copyWidget: \"Copy widget to environment\",\n        deleteWidget: \"Delete widget\",\n        imageIsNotValid: \"Image is not valid\",\n        someFieldsAreEmpty: \"Some fields are empty\",\n        dateRangeIsInvalid: \"Availability date range is invalid\",\n        createWidget: \"Create widget\",\n        revertChanges: \"Revert changes\",\n        areYouSureToRevert: \"Are you sure you want to revert changes for \",\n        areYouSureToPublish: \"Are you sure you want to publish changes for \",\n        publishChanges: \"Publish changes\",\n        areYouSureToDeleteWidget: \"Are you sure you want to delete this widget?\",\n        successfullyPublished: \"Successfully published. Changes will appear in the app shortly\",\n        pngImagesOnly: `Format: PNG. Min size: ${MinWidth}x${MinHeight}. Max size: ${MaxWidth}x${MaxHeight}`\n    }\n});\n\n","import { Strings } from \"src/Localization/Strings\";\nimport { Result } from \"src/Result\";\n\nexport const MinWidth = 750;\nexport const MinHeight = 784;\nexport const MaxWidth = 1500;\nexport const MaxHeight = 1568;\n\nexport const validateImageAsync = (blob: Blob) => {\n    const promise = new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = window.URL.createObjectURL(blob);\n        img.onload = () => {\n            if (img.width < MinWidth || img.width > MaxWidth || img.height < MinHeight || img.height > MaxHeight) {\n                reject();\n            } else {\n                resolve();\n            }\n        }\n        img.onerror = () => reject();\n    });\n\n    return Result.FromPromise(promise).withOverridenError(Strings.imageIsNotValid);\n}","export const MemoryStorage = new Map<string, any>();","export const Config = {\n    version: \"1.0.0\",\n    debug: false,\n    debugDataKey: \"debug_data\",\n    debugCountryKey: \"debug_country\",\n    countries: [{\n        name: \"CH\", \n        languages: [\"en\", \"de\", \"it\", \"fr\"],\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\n    }, {\n        name: \"AT\", \n        languages: [\"de\"],\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\n    }, {\n        name: \"GB\", \n        languages: [\"en\"],\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\n    }, {\n        name: \"NL\", \n        languages: [\"nl\"],\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\n    }, {\n        name: \"IE\", \n        languages: [\"en\"],\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\n    }, {\n        name: \"BY\", \n        languages: [\"by\"],\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\n    }, {\n        name: \"PL\", \n        languages: [\"pl\", \"en\"],\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\n    }]\n}","import { Maybe } from 'src/Types/Maybe';\nimport { MemoryStorage } from './MemoryStorage';\nimport { Config } from 'src/Config';\n\nexport const getStorageItem = <T extends unknown>(key: string): Maybe<T> => {\n    if (Config.debug) {\n        return MemoryStorage.get(key) || localStorage.getItem(key) as T;\n    } else {\n        localStorage.removeItem(key);\n    }\n\n    return MemoryStorage.get(key);\n}","import { Result } from \"src/Result\";\nimport { getUserCredentials } from \"../Authorization/getUserCredentials\";\nimport { HttpRequestKeyValuesType } from \"./Types/HttpRequestKeyValuesType\";\nimport { HttpRequestType } from './Types/HttpRequestType';\n\nexport const sendRequestAsync = (request: HttpRequestType): Result<Response> => {\n    const headers = getHeaders(request);\n\n    const params: RequestInit = {\n        method: request.method,\n        headers,\n        mode: \"cors\",\n    };\n\n    if (request.body) {\n        params.body = request.useJsonContentType\n            ? JSON.stringify(request.body)\n            : request.body as any;\n    }\n\n    const url = getUrl(request.path, request.queryParams);\n\n    return Result.FromPromise(fetch(url, params))\n        .onSuccess(response => response.status >= 200 && response.status < 300\n            ? Result.Ok(response)    \n            : Result.Fail(`${response.status}`)\n        );\n}\n\nconst getHeaders = (request: HttpRequestType): HttpRequestKeyValuesType => {\n    let headers: HttpRequestKeyValuesType = {\n        ...request.headers\n    };\n\n    if (request.ignoreCacheControl !== true) {\n        headers = { \"If-Modified-Since\": new Date().toLocaleString() };\n    }\n\n    if (request.useJsonContentType) {\n        headers = { \"Content-Type\": \"application/json\", ...headers };\n    }\n\n    if (request.useAuthorization) {\n        headers = { \"Authorization\": `Basic ${getUserCredentials()}`, ...headers };\n    }\n\n    return headers;\n}\n\nconst getUrl = (path: string, queryParams?: HttpRequestKeyValuesType): string => {\n    return `${path}${createQueryString(queryParams)}`;\n}\n\nconst createQueryString = (queryParams?: HttpRequestKeyValuesType): string => {\n    if (!queryParams) {\n        return \"\";\n    }\n\n    const keyValues = Object\n        .keys(queryParams)\n        .filter(key => queryParams[key] === 'boolean' || !!queryParams[key])\n        .map(key => `${key}=${queryParams[key]}`)\n        .join('&');\n\n    return `?${keyValues}`;\n}","import { CredentialsStorageKey } from './Models/CredentialsStorageKey';\nimport { getStorageItem } from '../Storage/getStorageItem';\n\nexport const getUserCredentials = () => {\n    return getStorageItem(CredentialsStorageKey);\n}","export const CredentialsStorageKey = \"credentials\";","import { Result } from \"src/Result\";\nimport { HttpRequestType } from './Types/HttpRequestType';\nimport { sendRequestAsync } from './sendRequestAsync';\n\nexport const sendJsonRequestAsync = <T extends unknown>(request: HttpRequestType): Result<T> => {\n    return sendRequestAsync(request)\n        .onSuccess(response => response.json());\n}","import { Maybe } from 'src/Types/Maybe';\nimport { Config } from '../../Config';\nimport { RepositoryNamePrefix } from './Models/RepositoryNamePrefix';\n\nexport const extractCountryName = (repositoryName: string): Maybe<string> => {\n    const loweredRepositoryName = repositoryName.toLowerCase();\n    const availableNames = Config.countries.map(t => `${RepositoryNamePrefix}${t.name}`.toLowerCase());\n\n    return availableNames.find(t => t === loweredRepositoryName)?.substr(RepositoryNamePrefix.length).toUpperCase();\n}","export const RepositoryNamePrefix = \"capp-instantWidgets-\";","export const ApiRoot = \"https://api.github.com/\";","import { sendJsonRequestAsync } from '../Http/sendJsonRequestAsync';\nimport { HttpRequestType } from '../Http/Types/HttpRequestType';\nimport { isValidRepository } from './isValidRepository';\nimport { ApiRoot } from './Models/ApiRoot';\nimport { RepositoryOwner } from './Models/RepositoryOwner';\nimport { RepositoryType } from './Types/RepositoryType';\n\nexport const fetchRepositoriesAsync = () => {\n    const request: HttpRequestType = {\n        path: `${ApiRoot}user/repos?per_page=1000`,\n        method: \"GET\",\n        useAuthorization: true,\n    };\n    \n    return sendJsonRequestAsync<RepositoryType[]>(request)\n        .onSuccess(repositories => repositories.filter(t => isValidRepository(t.name) && t.owner.login === RepositoryOwner));\n}","import { isNil } from 'lodash';\nimport { extractCountryName } from './extractCountryName';\n\nexport const isValidRepository = (repositoryName: string) => !isNil(extractCountryName(repositoryName));","export const RepositoryOwner = \"LibertyGlobal\";","import { Config } from 'src/Config';\nimport { MemoryStorage } from './MemoryStorage';\n\nexport const setStorageItem = (key: string, value: any) => {\n    if (Config.debug) {\n        localStorage.setItem(key, value);\n    } else {\n        localStorage.removeItem(key);\n    }\n\n    MemoryStorage.set(key, value)\n};","import { Strings } from 'src/Localization/Strings';\nimport { Result } from 'src/Result';\nimport { fetchRepositoriesAsync } from '../GitHub/fetchRepositoriesAsync';\nimport { setRepositories } from '../GitHub/setRepositories';\nimport { setUserCredentials } from './setUserCredentials';\n\nexport const loginAsync = (username: string, password: string): Result<void> => {\n    setUserCredentials(username, password);\n\n    return fetchRepositoriesAsync()\n        .withOverridenError(Strings.loginFailed)\n        .ensure(repositories => repositories.length > 0, Strings.noRepositoriesAvailable)\n        .onSuccess(repositories => setRepositories(repositories))\n}","import { setStorageItem } from '../Storage/setStorageItem';\nimport { CredentialsStorageKey } from './Models/CredentialsStorageKey';\n\nexport const setUserCredentials = (username: string, password: string) => {\n    return setStorageItem(CredentialsStorageKey, btoa(`${username}:${password}`));\n}","import { RepositoryType } from './Types/RepositoryType';\nimport { setStorageItem } from '../Storage/setStorageItem';\nimport { RepositoriesStorageKey } from './Models/RepositoriesStorageKey';\n\nexport const setRepositories = (repositories: RepositoryType[]) => {\n    setStorageItem(RepositoriesStorageKey, repositories);\n}","export const RepositoriesStorageKey = \"Repositories\";","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, Link, TextField, Typography } from '@material-ui/core';\nimport React, { Fragment, useCallback, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { ErrorAlert } from 'src/Components/ErrorAlert/ErrorAlert';\nimport { Loader } from \"src/Components/Loader/Loader\";\nimport { Strings } from \"src/Localization/Strings\";\nimport { loginAsync } from '../../Services/Authorization/loginAsync';\nimport { Config } from 'src/Config';\n\nexport const Login = () => {\n    const history = useHistory();\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState<string>();\n    const [username, setUsername] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n\n    const onLogin = useCallback(() => {\n        setIsLoading(true);\n\n        loginAsync(username, password)\n            .onFailure(error => setError(error))\n            .onSuccess(_ => history.replace(\"/pick\"))\n            .onBoth(_ => setIsLoading(false))\n            .run();\n    }, [password, username, history]);\n\n    return (\n        <Fragment>\n            <Typography>{Config.version}</Typography>\n            <Dialog open>\n                <DialogTitle>{Strings.loginTitle}</DialogTitle>\n                <DialogContent dividers>\n                    <Grid container spacing={2} direction=\"column\">\n                        <ErrorAlert error={error} />\n                        <Grid item>\n                            <TextField\n                                autoFocus\n                                fullWidth\n                                required\n                                label={Strings.userName}\n                                type=\"text\"\n                                onChange={e => setUsername(e.target.value)}\n                            />\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                                fullWidth\n                                required\n                                label={Strings.pat}\n                                type=\"password\"\n                                onChange={e => setPassword(e.target.value)}\n                            />\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Typography>\n                        <Link target=\"_blank\" href=\"https://github.com/instant-widgets-editor/instant-widgets-editor.github.io/blob/master/README.md#instant-widgets-editor\">\n                            {Strings.instructions}\n                        </Link>\n                    </Typography>\n                    <Button variant=\"contained\" color=\"primary\" onClick={onLogin}>\n                        {Strings.login}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Loader visible={isLoading} />\n        </Fragment>\n    )\n}","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControlLabel, Radio, RadioGroup } from '@material-ui/core';\nimport { isNil } from 'lodash';\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport { Strings } from \"src/Localization/Strings\";\nimport { getRepositories } from '../../Services/GitHub/getRepositories';\nimport { RepositoryType } from '../../Services/GitHub/Types/RepositoryType';\nimport { extractCountryName } from '../../Services/GitHub/extractCountryName';\n\nexport const PickRepository = () => {\n    const history = useHistory();\n\n    const [repositories, setRepositories] = useState<RepositoryType[]>([]);\n    const [selectedRepository, setSelectedRepository] = useState<RepositoryType>();\n\n    useEffect(() => setRepositories(getRepositories() || []), []);\n\n    const onSelectRepository = useCallback((name: string) => \n        setSelectedRepository(repositories.find(t => t.name === name)), \n        [repositories]\n    );\n\n    const onStartEditing = useCallback(() => {\n        if (isNil(selectedRepository)) {\n            return;\n        }\n        \n        const maybeCountry = extractCountryName(selectedRepository.name);\n\n        if (!isNil(maybeCountry)) {\n            history.replace(`/manage/country/${maybeCountry}`);\n        }\n    }, [selectedRepository, history]);\n\n    return (\n        <Dialog open>\n            <DialogTitle>{Strings.pickRepository}</DialogTitle>\n            <DialogContent dividers>\n                <RadioGroup\n                    onChange={e => onSelectRepository(e.target.value)}\n                >\n                    {repositories.map(option => (\n                        <FormControlLabel\n                            value={option.name}\n                            key={option.name}\n                            control={<Radio />}\n                            label={option.name}\n                        />\n                    ))}\n                </RadioGroup>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" color=\"primary\" onClick={onStartEditing}>\n                    {Strings.startEditing}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}","import { getStorageItem } from '../Storage/getStorageItem';\nimport { RepositoriesStorageKey } from './Models/RepositoriesStorageKey';\nimport { RepositoryType } from './Types/RepositoryType';\n\nexport const getRepositories = () => getStorageItem<RepositoryType[]>(RepositoriesStorageKey);","import { isNil } from 'lodash';\nimport React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Loader } from \"src/Components/Loader/Loader\";\nimport { Config } from \"src/Config\";\n\ntype StartPropsType = {\n    onCompleted: () => void;\n}\n\nexport const Start = (props: StartPropsType) => {\n    const { onCompleted } = props;\n\n    const history = useHistory();\n\n    useEffect(() => {\n        if (Config.debug && !isNil(localStorage.getItem(Config.debugCountryKey))) {\n            onCompleted();\n            history.push(`/manage/country/${localStorage.getItem(Config.debugCountryKey)}`);\n            return;\n        }\n\n        history.push(\"/login\");\n\n        onCompleted();\n    }, [onCompleted, history]);\n\n    return (\n        <Loader visible />\n    )\n}","import { makeStyles } from \"@material-ui/core/styles\"\n\nexport const useStyles = makeStyles(theme => ({\n    container: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(2),\n    },\n}));","import { Divider as MuiDivider } from '@material-ui/core';\nimport React from \"react\";\nimport { useStyles } from '../Divider/Styles';\n\nexport const Divider = () => {\n    const styles = useStyles();\n\n    return (<MuiDivider className={styles.container} />)\n}","import { useConfirm } from \"material-ui-confirm\";\nimport { useCallback } from 'react';\nimport { Result } from \"src/Result\";\n\nexport const useConfirmResult = () => {\n    const confirm = useConfirm();\n\n    return useCallback((title: string) => Result.FromPromise(confirm({ title })), [confirm]);\n}","import { Config } from '../../Config';\n\nexport const getLanguages = (country: string) =>\n    Config.countries.find(t => t.name === country)?.languages || [];","import { getLanguages } from './getLanguages';\nimport { WidgetAudiences } from './Models/WidgetAudiences';\nimport { MultilangStringType } from './Types/MultilangStringType';\nimport { WidgetType } from './Types/WidgetType';\n\nexport const createWidget = (country: string): WidgetType => {\n    const languages = getLanguages(country);\n\n    return {\n        title: createMultilangString(languages),\n        description: createMultilangString(languages),\n        fromDate: new Date(),\n        tillDate: new Date(),\n        audience: WidgetAudiences.all,\n        imageUrl: \"\",\n        button: {\n            url: \"\",\n            title: createMultilangString(languages),\n        }\n    }\n}\n\nconst createMultilangString = (langs: string[]): MultilangStringType => {\n    return langs.reduce((obj, lang) => Object.assign(obj, { [lang]: \"\" }), {});\n}","import { useMemo } from \"react\";\nimport { getMultilangStringValue } from \"src/Services/Management/getMultilangStringValue\";\nimport { MultilangStringType } from '../Services/Management/Types/MultilangStringType';\n\nexport const useMultilangString = (country: string, string: MultilangStringType) => useMemo(() => getMultilangStringValue(country, string), [country, string]);","import { isNil } from 'lodash';\nimport { Config } from '../../Config';\nimport { MultilangStringType } from './Types/MultilangStringType';\n\nexport const getMultilangStringValue = (country: string, string: MultilangStringType) => {\n    const defaultLang = Config.countries.find(t => t.name === country)?.languages[0];\n\n    return isNil(defaultLang)\n        ? Object.values(string)[0]\n        : string[defaultLang];\n}","import { Config } from '../../Config';\n\nexport const getEnvironments = (country: string) => \n    Config.countries.find(t => t.name === country)?.environments || [];","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Select } from '@material-ui/core';\nimport React, { useCallback, useMemo, useState } from \"react\";\nimport { Strings } from \"src/Localization/Strings\";\nimport { getEnvironments } from '../../Services/Management/getEnvironments';\n\ntype WidgetCopierPropsType = {\n    country: string,\n    open: boolean,\n    onCancel: () => void,\n    onCopy: (environment: string) => void,\n}\n\nexport const WidgetCopier = (props: WidgetCopierPropsType) => {\n    const { onCopy } = props;\n\n    const environments = useMemo(() => getEnvironments(props.country), [props.country]);\n\n    const [selectedEnvironment, setSelectedEnvironment] = useState<string>(environments[0]);\n\n    const onCopyInner = useCallback(() => selectedEnvironment && onCopy(selectedEnvironment), [onCopy, selectedEnvironment]);\n\n    return (\n        <Dialog open={props.open} fullWidth maxWidth=\"sm\">\n            <DialogTitle>{Strings.copyWidget}</DialogTitle>\n            <DialogContent dividers>\n                <Select\n                    onChange={e => setSelectedEnvironment(e.target.value as string || environments[0])}\n                    fullWidth\n                    variant=\"outlined\"\n                >\n                    {environments.map(environemnt => <MenuItem key={environemnt} value={environemnt}>{environemnt}</MenuItem>)}\n                </Select>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"contained\" onClick={props.onCancel}>\n                    {Strings.cancel}\n                </Button>\n                <Button variant=\"contained\" color=\"primary\" onClick={onCopyInner}>\n                    {Strings.copy}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}","import { isNil } from 'lodash';\nimport moment from 'moment';\nimport { Result } from 'src/Result';\nimport { Maybe } from 'src/Types/Maybe';\nimport { Strings } from '../../Localization/Strings';\nimport { KeyValueType } from '../../Types/KeyValueType';\nimport { WidgetType } from './Types/WidgetType';\nimport { validateImageAsync } from './validateImageAsync';\n\nexport const validateWidgetAsync = (widget: WidgetType, image: Maybe<Blob>): Result<void> => {\n    return Result.Void()\n        .onSuccess(_ => image && validateImageAsync(image))\n        .onSuccess(_ => allValuesFilled(widget.button.title))\n        .onSuccess(_ => allValuesFilled(widget.description))\n        .onSuccess(_ => allValuesFilled(widget.title))\n        .ensure(_ => moment(widget.fromDate).isBefore(widget.tillDate), Strings.dateRangeIsInvalid)\n        .void;\n}\n\nconst allValuesFilled = (object: KeyValueType) => Object.values(object).every(t => !isNil(t) && t.length > 0)\n    ? Result.Void()\n    : Result.Fail(Strings.someFieldsAreEmpty);","export const arrayBufferToBase64 = (buffer: ArrayBuffer) => {\n    let binary = '';\n    let bytes = [].slice.call(new Uint8Array(buffer));\n\n    bytes.forEach((b) => binary += String.fromCharCode(b));\n\n    return btoa(binary);\n}","import MomentUtils from '@date-io/moment';\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport React, { Fragment } from \"react\";\nimport { Grid, Typography } from '@material-ui/core';\n\ntype DatePickerPropsType = {\n    title: string,\n    value: Date,\n    onChange: (date: Date) => void,\n}\n\nconst DateFormat = \"DD/MM/YYYY\";\n\nexport const DatePicker = (props: DatePickerPropsType) => {\n    return (\n        <Fragment>\n            <Grid item>\n                <Typography variant=\"h6\">{props.title}</Typography>\n            </Grid>\n            <Grid item>\n                <MuiPickersUtilsProvider utils={MomentUtils}>\n                    <KeyboardDatePicker\n                        inputVariant=\"outlined\"\n                        placeholder={props.title}\n                        margin=\"normal\"\n                        label={DateFormat}\n                        format={DateFormat}\n                        value={props.value}\n                        onChange={date => props.onChange(date?.toDate() || new Date())}\n                        invalidDateMessage=\" \"\n                        maxDateMessage=\" \"\n                        minDateMessage=\" \"\n                        clearable\n                        fullWidth\n                    />\n                </MuiPickersUtilsProvider>\n            </Grid>\n        </Fragment>\n    );\n}","import { Grid, TextField, Typography } from '@material-ui/core';\nimport { isNil } from 'lodash';\nimport React, { useMemo } from \"react\";\nimport { getLanguages } from '../../Services/Management/getLanguages';\nimport { MultilangStringType } from '../../Services/Management/Types/MultilangStringType';\n\ntype WidgetManagerMultilangFieldPropsType = {\n    country: string,\n    label?: string,\n    value: MultilangStringType,\n    onChange: (value: string, language: string) => void,\n}\n\nexport const WidgetManagerMultilangField = (props: WidgetManagerMultilangFieldPropsType) => {\n    const languages = useMemo(() => getLanguages(props.country), [props.country]);\n\n    return (\n        <Grid item container direction=\"column\" spacing={2}>\n            {!isNil(props.label) &&\n                <Grid item>\n                    <Typography variant=\"h6\">{props.label}</Typography>\n                </Grid>\n            }\n            {languages.map(language =>\n                <Grid item key={language}>\n                    <TextField\n                        fullWidth\n                        label={language}\n                        type=\"text\"\n                        variant=\"outlined\"\n                        error={props.value[language]?.length === 0}\n                        value={props.value[language]}\n                        onChange={e => props.onChange(e.target.value, language)}\n                    />\n                </Grid>\n            )}\n        </Grid>\n    )\n}","import { makeStyles } from \"@material-ui/core/styles\"\n\nexport const useStyles = makeStyles(theme => ({\n    fileUploadContainer: {\n        flex: 1,\n    },\n}));","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, MenuItem, Select, TextField, Typography } from '@material-ui/core';\nimport merge from 'deepmerge';\nimport { isNil } from 'lodash';\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport shortid from 'shortid';\nimport { ErrorAlert } from 'src/Components/ErrorAlert/ErrorAlert';\nimport { Strings } from \"src/Localization/Strings\";\nimport { validateWidgetAsync } from 'src/Services/Management/validateWidgetAsync';\nimport { Maybe } from 'src/Types/Maybe';\nimport { useConfirmResult } from '../../Hooks/useConfirmResult';\nimport { convertImageToBase64Async } from '../../Services/Management/convertImageToBase64Async';\nimport { WidgetAudiences } from '../../Services/Management/Models/WidgetAudiences';\nimport { WidgetType } from '../../Services/Management/Types/WidgetType';\nimport { DatePicker } from '../DatePicker/DatePicker';\nimport { Divider } from '../Divider/Divider';\nimport { WidgetManagerMultilangField } from '../WidgetManagerMultilangField/WidgetManagerMultilangField';\nimport { useStyles } from './Styles';\n\ntype WidgetManagerPropsType = {\n    country: string,\n    widget: WidgetType,\n    open: boolean,\n    onCancel: () => void,\n    onDelete?: () => void,\n    onSave: (widget: WidgetType, imageBase64: Maybe<string>) => void,\n}\n\nexport const WidgetManager = (props: WidgetManagerPropsType) => {\n    const { onSave, onDelete } = props;\n\n    const [openCounter, setOpenCounter] = useState(0);\n    const [workingCopy, setWorkingCopy] = useState<WidgetType>(props.widget);\n    const [imageSource, setImageSource] = useState<Blob>();\n    const [imageBase64, setImageBase64] = useState<string>();\n    const [error, setError] = useState<string>();\n\n    const styles = useStyles();\n\n    const confirmAsync = useConfirmResult();\n\n    useEffect(() => {\n        setWorkingCopy(merge(props.widget, {}));\n        setError(undefined);\n    }, [props.widget, openCounter]);\n\n    useEffect(() => setOpenCounter(t => t + 1), [props.open]);\n\n    const onUpdate = useCallback((action: (target: WidgetType) => void) => {\n        action(workingCopy);\n        setWorkingCopy(merge<WidgetType>(workingCopy, {}));\n    }, [workingCopy]);\n\n    const onRemoveImage = useCallback(() => {\n        onUpdate(t => t.imageUrl = \"\")\n        setImageBase64(undefined);\n        setImageSource(undefined);\n    }, [onUpdate]);\n\n    const onAddImage = useCallback((files: FileList | null) => {\n        if (isNil(files) || files.length === 0) {\n            return;\n        }\n\n        onUpdate(t => t.imageUrl = `${shortid.generate()}.png`);\n\n        setImageSource(files[0]);\n\n        convertImageToBase64Async(files[0])\n            .onSuccess(base64 => {\n                setImageBase64(base64);\n                setError(undefined);\n            })\n            .onFailure(error => setError(error))\n            .run();\n    }, [onUpdate]);\n\n    const onSaveInner = useCallback(() => {\n        validateWidgetAsync(workingCopy, imageSource)\n            .onSuccess(_ => onSave(workingCopy, imageBase64))\n            .onFailure(error => setError(error))\n            .run();\n\n    }, [onSave, workingCopy, imageBase64, imageSource]);\n\n    const onDeleteInner = useCallback(() => {\n        if (isNil(onDelete)) {\n            return;\n        }\n        \n        confirmAsync(Strings.areYouSureToDeleteWidget)\n            .onSuccess(_ => onDelete())\n            .run();\n    }, [confirmAsync, onDelete]);\n\n    return (\n        <Dialog open={props.open} fullWidth maxWidth=\"sm\">\n            <DialogTitle>\n                {Strings.manageWidget}\n                <ErrorAlert error={error} />\n            </DialogTitle>\n            <DialogContent dividers>\n                <Grid container spacing={2} direction=\"column\">\n                    <WidgetManagerMultilangField\n                        label={Strings.title}\n                        value={workingCopy.title}\n                        country={props.country}\n                        onChange={(value, lang) => onUpdate(t => t.title[lang] = value)}\n                    />\n                    <Divider />\n                    <WidgetManagerMultilangField\n                        label={Strings.description}\n                        value={workingCopy.description}\n                        country={props.country}\n                        onChange={(value, lang) => onUpdate(t => t.description[lang] = value)}\n                    />\n                    <Divider />\n                    <Grid item>\n                        <Typography variant=\"h6\">{Strings.image}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography color=\"textSecondary\" variant=\"subtitle2\">{Strings.pngImagesOnly}</Typography>\n                    </Grid>\n                    <Grid item container alignContent=\"center\" justify=\"center\" alignItems=\"center\">\n                        <Grid item className={styles.fileUploadContainer}>\n                            <input\n                                accept=\"image/png\"\n                                type=\"file\"\n                                onChange={e => onAddImage(e.target.files)}\n                            />\n                        </Grid>\n                        {workingCopy.imageUrl.length > 0 &&\n                            <Grid item>\n                                <Button variant=\"contained\" color=\"secondary\" onClick={onRemoveImage}>\n                                    {Strings.removeImage}\n                                </Button>\n                            </Grid>\n                        }\n                    </Grid>\n                    <Divider />\n                    <Grid item>\n                        <Typography variant=\"h6\">{Strings.moreButton}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            fullWidth\n                            label={Strings.link}\n                            type=\"text\"\n                            variant=\"outlined\"\n                            value={workingCopy.button.url}\n                            error={workingCopy.button.url.length === 0}\n                            onChange={e => onUpdate(t => t.button.url = e.target.value)}\n                        />\n                    </Grid>\n                    <WidgetManagerMultilangField\n                        value={workingCopy.button.title}\n                        country={props.country}\n                        onChange={(value, lang) => onUpdate(t => t.button.title[lang] = value)}\n                    />\n                    <Divider />\n                    <Grid item>\n                        <Typography variant=\"h6\">{Strings.audience}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Select\n                            value={workingCopy.audience}\n                            onChange={e => onUpdate(t => t.audience = e.target.value as WidgetAudiences)}\n                            fullWidth\n                            variant=\"outlined\"\n                        >\n                            {Object.values(WidgetAudiences).map(audience => <MenuItem key={audience} value={audience}>{audience}</MenuItem>)}\n                        </Select>\n                    </Grid>\n                    <Divider />\n                    <DatePicker\n                        title={Strings.fromDate}\n                        value={workingCopy.fromDate}\n                        onChange={date => onUpdate(t => t.fromDate = date)}\n                    />\n                    <Divider />\n                    <DatePicker\n                        title={Strings.tillDate}\n                        value={workingCopy.tillDate}\n                        onChange={date => onUpdate(t => t.tillDate = date)}\n                    />\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                {!isNil(props.onDelete) &&\n                    <Button variant=\"contained\" color=\"secondary\" onClick={onDeleteInner}>\n                        {Strings.deleteWidget}\n                    </Button>\n                }\n                <Button variant=\"contained\" onClick={props.onCancel}>\n                    {Strings.cancel}\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={onSaveInner}\n                >\n                    {Strings.save}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}","import { Result } from \"src/Result\";\nimport { arrayBufferToBase64 } from './arrayBufferToBase64';\n\nexport const convertImageToBase64Async = (blob: Blob) => {\n    const promise = new Promise<ArrayBuffer>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsArrayBuffer(blob);\n        reader.onload = () => resolve(reader.result as any);\n        reader.onerror = error => reject(error);\n    })\n\n    return Result.FromPromise(promise).onSuccess(buffer => arrayBufferToBase64(buffer));\n}","import { makeStyles } from \"@material-ui/core/styles\"\n\nexport const useStyles = makeStyles(theme => ({\n    wrapper: {\n        marginRight: theme.spacing(2),\n    },\n    container: {\n        width: 365,\n        height: 224,\n        backgroundColor: \"black\",\n        borderRadius: 8,\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n    },\n    contentContainer: {\n        padding: theme.spacing(5),\n        height: \"100%\",\n    },\n    title: {\n        textAlign: \"center\",\n        color: \"white\",\n    },\n    description: {\n        textAlign: \"center\",\n        color: \"white\",\n    },\n    button: {\n        backgroundColor: \"white\",\n        borderRadius: theme.spacing(2),\n        color: \"black\",\n        padding: theme.spacing(1),\n        '&:hover': {\n            textDecoration: \"none\",\n        },\n    },\n    actionsContainer: {\n        padding: theme.spacing(1),\n        minHeight: theme.spacing(10),\n    },\n    containerInactive: {\n        opacity: .2,\n    }\n}));","import { Box, Button, Grid, Link, Typography } from '@material-ui/core';\nimport moment from 'moment';\nimport React, { useCallback, useMemo, useState, Fragment } from 'react';\nimport useHover from 'react-use-hover';\nimport { Strings } from 'src/Localization/Strings';\nimport { WidgetType } from 'src/Services/Management/Types/WidgetType';\nimport { Maybe } from 'src/Types/Maybe';\nimport { useMultilangString } from '../../Hooks/useMultilangString';\nimport { WidgetCopier } from '../WidgetCopier/WidgetCopier';\nimport { WidgetManager } from '../WidgetManager/WidgetManager';\nimport { useStyles } from './Styles';\n\ntype WidgetPropsType = {\n    country: string,\n    widget: WidgetType,\n    imageBase64: Maybe<string>,\n    onChanged: (widget: WidgetType, imageBase64: Maybe<string>) => void,\n    onCopy: (env: string, widget: WidgetType, imageBase64: Maybe<string>) => void,\n    onDelete: () => void,\n};\n\nexport const Widget = (props: WidgetPropsType) => {\n    const { onChanged, onCopy, onDelete } = props;\n\n    const styles = useStyles();\n\n    const title = useMultilangString(props.country, props.widget.title);\n    const description = useMultilangString(props.country, props.widget.description);\n    const buttonTitle = useMultilangString(props.country, props.widget.button.title);\n    const backgroundImage = useMemo(() => props.imageBase64 && `url(\"data:image/png;base64,${props.imageBase64}\")`, [props.imageBase64]);\n\n    const availabilityString = useMemo(() =>\n        `${moment.utc(props.widget.fromDate).format(\"ll\")} - ${moment.utc(props.widget.tillDate).format(\"ll\")}`,\n        [props.widget.fromDate, props.widget.tillDate]\n    );\n\n    const isActive = useMemo(() => {\n        const current = moment.utc();\n\n        return current.isSameOrAfter(props.widget.fromDate) && current.isSameOrBefore(props.widget.tillDate);\n    }, [props.widget.fromDate, props.widget.tillDate]);\n\n    const containerClass = useMemo(() => `${styles.container} ${isActive ? \"\" : styles.containerInactive}`, [isActive, styles.container, styles.containerInactive]);\n\n    const [isManagementOpen, setIsManagementOpen] = useState(false);\n    const [isCopyOpen, setIsCopyOpen] = useState(false);\n\n    const onSave = useCallback((widget: WidgetType, imageBase64: Maybe<string>) => {\n        onChanged(widget, imageBase64);\n        setIsManagementOpen(false);\n    }, [onChanged]);\n\n    const onCopyInner = useCallback((env: string) => {\n        onCopy(env, props.widget, props.imageBase64);\n        setIsCopyOpen(false);\n    }, [onCopy, props.widget, props.imageBase64]);\n\n    const onDeleteInner = useCallback(() => {\n        onDelete();\n        setIsManagementOpen(false);\n    }, [onDelete]);\n\n    const [isHover, hoverProps] = useHover();\n\n    return (\n        <Box className={styles.wrapper} {...hoverProps}>\n            <Box className={containerClass} style={{ backgroundImage }}>\n                <Grid container direction=\"column\" alignItems=\"center\" justify=\"space-between\" className={styles.contentContainer}>\n                    <Grid item>\n                        <Typography className={styles.title} variant=\"h5\" gutterBottom>{title}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography className={styles.description} variant=\"body1\" gutterBottom>{description}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography>\n                            <Link\n                                className={styles.button}\n                                target=\"_blank\"\n                                href={props.widget.button.url}\n                            >\n                                {buttonTitle}\n                            </Link>\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Box>\n            <Grid container className={styles.actionsContainer} spacing={1} alignContent=\"center\" alignItems=\"center\">\n                <Grid item>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">{props.widget.audience}</Typography>\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">{availabilityString}</Typography>\n                </Grid>\n                {isHover &&\n                    <Fragment>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                onClick={() => setIsManagementOpen(true)}\n                            >\n                                {Strings.edit}\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                onClick={() => setIsCopyOpen(true)}\n                            >\n                                {Strings.copy}\n                            </Button>\n                        </Grid>\n                    </Fragment>\n                }\n            </Grid>\n            <WidgetManager\n                country={props.country}\n                widget={props.widget}\n                open={isManagementOpen}\n                onCancel={() => setIsManagementOpen(false)}\n                onSave={onSave}\n                onDelete={onDeleteInner}\n            />\n            <WidgetCopier\n                country={props.country}\n                open={isCopyOpen}\n                onCancel={() => setIsCopyOpen(false)}\n                onCopy={environment => onCopyInner(environment)}\n            />\n        </Box>\n    );\n}","import { makeStyles } from \"@material-ui/core/styles\"\n\nexport const useStyles = makeStyles(theme => ({\n    widgetsContainer: {\n        display: \"flex\",\n        overflowX: \"auto\",\n        overflowY: \"hidden\",\n        marginTop: theme.spacing(2),\n    },\n    headerContainer: {\n        marginTop: theme.spacing(2),\n    }\n}));","import { Button, Grid, Typography } from '@material-ui/core';\nimport { isNil } from 'lodash';\nimport { useSnackbar } from 'material-ui-snackbar-provider';\nimport React, { Fragment, useCallback, useState } from 'react';\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { Strings } from 'src/Localization/Strings';\nimport { Result } from 'src/Result';\nimport { WidgetType } from 'src/Services/Management/Types/WidgetType';\nimport { Maybe } from 'src/Types/Maybe';\nimport { v4 } from 'uuid';\nimport { useConfirmResult } from '../../Hooks/useConfirmResult';\nimport { createWidget } from '../../Services/Management/createWidget';\nimport { ImageUrlToBase64MapType } from '../../Services/Management/Types/ImageUrlToBase64MapType';\nimport { Loader } from '../Loader/Loader';\nimport { Widget } from '../Widget/Widget';\nimport { WidgetManager } from '../WidgetManager/WidgetManager';\nimport { useStyles } from './Styles';\n\ntype EnvironmentPropsType = {\n    country: string,\n    hasChanges: boolean,\n    name: string,\n    widgets: WidgetType[],\n    imageUrlToBase64Map: ImageUrlToBase64MapType,\n    onWidgetChanged: (index: number, widget: WidgetType, imageBase64: Maybe<string>) => void,\n    onCopyWidget: (env: string, widget: WidgetType, imageBase64: Maybe<string>) => void,\n    onDeleteWidget: (index: number) => void,\n    onCreateWidget: (widget: WidgetType, imageBase64: Maybe<string>) => void,\n    onWidgetReordered: (fromIndex: number, toIndex: number) => void,\n    onRevertChanges: () => void,\n    onPublishChangesAsync: () => Result<void>,\n}\n\nexport const Environment = (props: EnvironmentPropsType) => {\n    const confirmAsync = useConfirmResult();\n    const snackbar = useSnackbar()\n\n    const { onCreateWidget, onRevertChanges, onCopyWidget, onDeleteWidget, onWidgetChanged, onWidgetReordered, onPublishChangesAsync } = props;\n\n    const styles = useStyles();\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [isWidgetCreationOpen, setIsWidgetCreationOpen] = useState(false);\n    const [createdWidget, setCreatedWidget] = useState<WidgetType>(createWidget(props.country));\n\n    const [widgetToIdMap] = useState(new Map<WidgetType, string>());\n\n    const onTriggerCreateWidget = useCallback(() => {\n        setCreatedWidget(createWidget(props.country));\n        setIsWidgetCreationOpen(true);\n    }, [props.country]);\n\n    const onCreateWidgetInner = useCallback((widget: WidgetType, imageBase64: Maybe<string>) => {\n        onCreateWidget(widget, imageBase64)\n        setIsWidgetCreationOpen(false);\n    }, [onCreateWidget]);\n\n    const getWidgetId = (widget: WidgetType) => widgetToIdMap.get(widget) || widgetToIdMap.set(widget, v4()).get(widget) || \"\";\n\n    const onWidgetReorderedInner = useCallback((result: DropResult) => {\n        if (isNil(result.destination)) { return; }\n        onWidgetReordered(result.source.index, result.destination.index);\n    }, [onWidgetReordered]);\n\n    const onRevertChangesInner = useCallback(() => {\n        confirmAsync(`${Strings.areYouSureToRevert} ${props.name}?`)\n            .onSuccess(_ => onRevertChanges())\n            .run();\n    }, [props.name, confirmAsync, onRevertChanges]);\n\n    const onPublishInner = useCallback(() => {\n        confirmAsync(`${Strings.areYouSureToPublish} ${props.name}?`)\n            .onSuccess(_ => {\n                setIsLoading(true);\n\n                return onPublishChangesAsync()\n                    .onFailure(_ => snackbar.showMessage(Strings.somethingWentWrong));\n            })\n            .onSuccess(_ => {\n                snackbar.showMessage(Strings.successfullyPublished);\n            })\n            .onBoth(_ => setIsLoading(false))\n            .run();\n    }, [onPublishChangesAsync, props.name, confirmAsync, snackbar]);\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid container item spacing={3} alignContent=\"center\" className={styles.headerContainer}>\n                <Grid item>\n                    <Typography variant=\"h5\" gutterBottom>{props.name}</Typography>\n                </Grid>\n                <Grid item>\n                    <Button\n                        variant=\"contained\"\n                        onClick={onTriggerCreateWidget}\n                    >\n                        {Strings.createWidget}\n                    </Button>\n                </Grid>\n                {props.hasChanges &&\n                    <Fragment>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={onPublishInner}\n                            >\n                                {Strings.publishChanges}\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button\n                                variant=\"contained\"\n                                color=\"secondary\"\n                                onClick={onRevertChangesInner}\n                            >\n                                {Strings.revertChanges}\n                            </Button>\n                        </Grid>\n                    </Fragment>\n                }\n            </Grid>\n            <Grid item>\n                <DragDropContext onDragEnd={onWidgetReorderedInner}>\n                    <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n                        {provided => (\n                            <div ref={provided.innerRef} className={styles.widgetsContainer} {...provided.droppableProps}>\n                                {props.widgets.map((widget, index) =>\n                                    <Draggable key={getWidgetId(widget)} draggableId={getWidgetId(widget)} index={index}>\n                                        {provided => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                            >\n                                                <Widget\n                                                    key={`${widget.title}-${index}`}\n                                                    country={props.country}\n                                                    imageBase64={props.imageUrlToBase64Map[widget.imageUrl]?.value || \"\"}\n                                                    widget={widget}\n                                                    onChanged={(widget, image64) => onWidgetChanged(index, widget, image64)}\n                                                    onCopy={(env, widget, image64) => onCopyWidget(env, widget, image64)}\n                                                    onDelete={() => onDeleteWidget(index)}\n                                                />\n                                            </div>\n                                        )}\n                                    </Draggable>\n                                )}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            </Grid>\n            <WidgetManager\n                country={props.country}\n                widget={createdWidget}\n                open={isWidgetCreationOpen}\n                onCancel={() => setIsWidgetCreationOpen(false)}\n                onSave={(widget, image64) => onCreateWidgetInner(widget, image64)}\n            />\n            <Loader visible={isLoading} />\n        </Grid >\n    );\n}","import moment from 'moment';\n\nexport const JsonDateTimeFormat = \"YYYY-MM-DD HH:mm:ss\";\n\n// eslint-disable-next-line no-extend-native\nDate.prototype.toJSON = function() { \n    return moment(this).utc().format(JsonDateTimeFormat).replace(\" \", \"T\"); \n}","import moment from 'moment';\nimport { JsonDateTimeFormat } from './DateExtensions';\n//@ts-ignore\nconst parseLegacy = JSON.parse;\n\nconst parseDate = (key: string, value: any) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n\n    const formattedDate = moment.utc(value.replace(\"T\", \" \"), JsonDateTimeFormat).format(JsonDateTimeFormat);\n\n    if (formattedDate === value) {\n        return moment.utc(value, JsonDateTimeFormat).toDate();\n    }\n\n    return value;\n};\n\nexport const parseJsonWithDates = (text: string, reviver?: (key: string, value: any) => any) => {\n    return parseLegacy(text, (key, value) => (reviver && reviver(key, value)) || parseDate(key, value))\n}\n\nJSON.parse = parseJsonWithDates;","import { isNil } from \"lodash\";\nimport { useRouteMatch } from 'react-router';\nimport { useMemo } from 'react';\n\ntype MatchType = {\n    [key: string]: string,\n}\n\nexport const useRouteParameter = (name: string) => {\n    const match = useRouteMatch<MatchType>();\n    const result = useMemo(() => {\n        return isNil(match) || isNil(match.params)\n            ? undefined \n            : match.params[name]\n    }, [match, name]);\n\n    return result;\n}","import { sendJsonRequestAsync } from \"../Http/sendJsonRequestAsync\";\nimport { HttpRequestType } from \"../Http/Types/HttpRequestType\";\nimport { ApiRoot } from \"./Models/ApiRoot\";\nimport { RepositoryOwner } from './Models/RepositoryOwner';\nimport { RepositoryContentType } from './Types/RepositoryContentType';\n\nexport const fetchFilesAsync = (repositoryName: string, path: string) => {\n    const request: HttpRequestType = {\n        path: `${ApiRoot}repos/${RepositoryOwner}/${repositoryName}/contents/${path}`,\n        method: \"GET\",\n        useAuthorization: true,\n    };\n    \n    return sendJsonRequestAsync<RepositoryContentType[]>(request);\n}","import { RepositoryNamePrefix } from './Models/RepositoryNamePrefix';\n\nexport const getRepositoryName = (country: string): string => {\n    return `${RepositoryNamePrefix}${country.toLowerCase()}`; \n}","export const getEnvironmentJsonFileName = (env: string) => `${env}.json`;","import { Strings } from 'src/Localization/Strings';\nimport { Result } from 'src/Result';\nimport { parseJsonWithDates } from '../../Extensions/JsonExtensions';\nimport { fetchFilesAsync } from '../GitHub/fetchFilesAsync';\nimport { getRepositoryName } from '../GitHub/getRepositoryName';\nimport { RepositoryContentType } from '../GitHub/Types/RepositoryContentType';\nimport { sendRequestAsync } from '../Http/sendRequestAsync';\nimport { arrayBufferToBase64 } from './arrayBufferToBase64';\nimport { getEnvironments } from './getEnvironments';\nimport { CountryDataType } from './Types/CountryDataType';\nimport { EnvironementDataType } from './Types/EnvironementDataType';\nimport { ImageUrlToBase64MapType } from './Types/ImageUrlToBase64MapType';\nimport { ImageUrlValueType } from './Types/ImageUrlValueType';\nimport { WidgetType } from './Types/WidgetType';\nimport { getEnvironmentJsonFileName } from './getEnvironmentJsonFileName';\n\nexport const loadCountryDataAsync = (country: string): Result<CountryDataType> => {\n    const repository = getRepositoryName(country);\n    const environments = getEnvironments(country);\n    const environmentFileNames = environments.map(t => getEnvironmentJsonFileName(t));\n\n    const environmentToDataMap = new Map<string, EnvironementDataType>();\n\n    return fetchFilesAsync(repository, \"\")\n        .onSuccess(data => data.filter(t => environmentFileNames.some(x => x === t.name)))\n        .onSuccess(environemntFiles => Result\n            .Combine(environemntFiles.map(content => downloadEnvironmentAsync(repository, content).onSuccess(data => environmentToDataMap.set(data.name, data))))\n            .onSuccess(_ => environments.compactMap(environment => environmentToDataMap.get(environment)))\n        )\n        .onSuccess((environments): CountryDataType => ({\n            country,\n            environments,\n        }))\n        .withOverridenError(Strings.somethingWentWrong);\n}\n\nexport const getEnvironmentFromJsonFileName = (fileName: string) => fileName.split(\".\")[0];\n\nconst downloadEnvironmentAsync = (repository: string, content: RepositoryContentType): Result<EnvironementDataType> => {\n    const environment = getEnvironmentFromJsonFileName(content.name);\n\n    return downloadRawTextFileAsync(content.download_url)\n        .onSuccess(json => parseJsonWithDates(json) as WidgetType[])\n        .onFailureCompensate(_ => [])\n        .onSuccess(widgets => downloadEnvironmentImagesAsync(repository, environment, widgets)\n            .onSuccess((imageUrlToBase64Map): EnvironementDataType => ({\n                name: environment,\n                sha: content.sha,\n                widgets,\n                hasChanges: false,\n                imageUrlToBase64Map: convertMapToKeyValueObj(imageUrlToBase64Map),\n            }))\n        );\n}\n\nconst convertMapToKeyValueObj = (map: Map<string, ImageUrlValueType>): ImageUrlToBase64MapType =>\n    Array.from(map).reduce((obj, [key, image]) => Object.assign(obj, { [key]: { sha: image.sha, value: image.value } }), {});\n\nconst downloadEnvironmentImagesAsync = (repository: string, environment: string, widgets: WidgetType[]): Result<Map<string, ImageUrlValueType>> => {\n    const imagesInUseSet = widgets.filter(t => t.imageUrl).map(t => t.imageUrl).reduce((result, current) => result.add(current) && result, new Set<string>());\n\n    return fetchFilesAsync(repository, `images/${environment}`)\n        .onFailureCompensate(_ => [])\n        .onSuccess(imagesContent => imagesContent.filter(t => imagesInUseSet.has(t.name)))\n        .onSuccess(imagesContent => Result\n            .Combine(imagesContent.map(t => downloadRawBase64FileAsync(t.download_url).onSuccess(file => ({ name: t.name, value: file, sha: t.sha }))))\n            .onSuccess(downloadedImages => {\n                const map = new Map<string, ImageUrlValueType>();\n\n                downloadedImages.forEach((image, index) => map.set(image.name, {\n                    value: image.value,\n                    sha: image.sha,\n                }));\n\n                return map;\n            })\n        );\n}\n\nconst downloadRawTextFileAsync = (url: string): Result<string> =>\n    sendRequestAsync({ path: url, method: \"GET\", ignoreCacheControl: true, })\n        .onSuccess(response => response.text());\n\nconst downloadRawBase64FileAsync = (url: string): Result<string> =>\n    sendRequestAsync({ path: url, method: \"GET\", ignoreCacheControl: true, })\n        .onSuccess(response => response.arrayBuffer())\n        .onSuccess(buffer => arrayBufferToBase64(buffer));","import { Result } from 'src/Result';\nimport { Maybe } from 'src/Types/Maybe';\nimport { sendJsonRequestAsync } from '../Http/sendJsonRequestAsync';\nimport { HttpRequestType } from '../Http/Types/HttpRequestType';\nimport { ApiRoot } from './Models/ApiRoot';\nimport { RepositoryOwner } from './Models/RepositoryOwner';\n\nexport const persistFileAsync = (repositoryName: string, path: string, base64Content: string, sha: Maybe<string>): Result<string> => {\n    const request: HttpRequestType = {\n        path: `${ApiRoot}repos/${RepositoryOwner}/${repositoryName}/contents/${path}`,\n        method: \"PUT\",\n        body: {\n            message: \"Publish changes\",\n            content: base64Content,\n            sha,\n        },\n        useAuthorization: true,\n        useJsonContentType: true,\n    };\n    \n    return sendJsonRequestAsync<PersistResponseType>(request)\n        .onSuccess(result => result.content.sha);\n}\n\ntype PersistResponseType = {\n    content: {\n        sha: string,\n    }\n};","import { isNil } from 'lodash';\nimport { Result } from 'src/Result';\nimport { createReleaseAsync } from '../GitHub/createReleaseAsync';\nimport { getRepositoryName } from '../GitHub/getRepositoryName';\nimport { persistFileAsync } from '../GitHub/persistFileAsync';\nimport { getEnvironmentJsonFileName } from './getEnvironmentJsonFileName';\nimport { EnvironementDataType } from './Types/EnvironementDataType';\n\nexport const publishEnvironmentChangesAsync = (country: string, environment: EnvironementDataType, publishedEnvironment: EnvironementDataType): Result<PublishResultType> => {\n    const repository = getRepositoryName(country);\n    const newImages = environment.widgets.map(t => t.imageUrl).filter(t => !isNil(environment.imageUrlToBase64Map[t]) && isNil(publishedEnvironment.imageUrlToBase64Map[t]));\n\n    const imagesUrlToShaMap = new Map<string, string>();\n\n    return Result\n        .Combine(newImages\n            .map(t => persistFileAsync(repository, `images/${environment.name}/${t}`, environment.imageUrlToBase64Map[t].value, environment.imageUrlToBase64Map[t].sha)\n                .onSuccess(sha => imagesUrlToShaMap.set(t, sha))\n            )\n        )\n        .onSuccess(_ => persistFileAsync(repository, getEnvironmentJsonFileName(environment.name), btoa(JSON.stringify(environment.widgets, undefined, 4)), environment.sha))\n        .onSuccess(environmentSha => createReleaseAsync(repository, environment.name).withOverridenValue(environmentSha))\n        .onSuccess((environmentSha): PublishResultType => ({\n            environmentSha,\n            imagesUrlToShaMap\n        }));\n}\n\ntype PublishResultType = {\n    environmentSha: string,\n    imagesUrlToShaMap: Map<string, string>,\n}","import moment from 'moment';\nimport { Result } from 'src/Result';\nimport { sendRequestAsync } from '../Http/sendRequestAsync';\nimport { HttpRequestType } from '../Http/Types/HttpRequestType';\nimport { ApiRoot } from './Models/ApiRoot';\nimport { RepositoryOwner } from './Models/RepositoryOwner';\n\nexport const createReleaseAsync = (repositoryName: string, environment: string): Result<void> => {\n    const request: HttpRequestType = {\n        path: `${ApiRoot}repos/${RepositoryOwner}/${repositoryName}/releases`,\n        method: \"POST\",\n        body: {\n            tag_name: `${environment}-${moment.utc().unix()}`,\n        },\n        useAuthorization: true,\n        useJsonContentType: true,\n    };\n    \n    return sendRequestAsync(request).void;\n}","import { makeStyles } from \"@material-ui/core/styles\"\n\nexport const useStyles = makeStyles(theme => ({\n    container: {\n        margin: theme.spacing(4),\n    }\n}));","import { Grid } from '@material-ui/core';\nimport merge from 'deepmerge';\nimport { isNil } from 'lodash';\nimport React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport { Divider } from 'src/Components/Divider/Divider';\nimport { Environment } from 'src/Components/Environment/Environment';\nimport { ErrorAlert } from 'src/Components/ErrorAlert/ErrorAlert';\nimport { Loader } from 'src/Components/Loader/Loader';\nimport { Config } from 'src/Config';\nimport { Strings } from 'src/Localization/Strings';\nimport { Result } from 'src/Result';\nimport { EnvironementDataType } from 'src/Services/Management/Types/EnvironementDataType';\nimport { WidgetType } from 'src/Services/Management/Types/WidgetType';\nimport { Maybe } from 'src/Types/Maybe';\nimport { parseJsonWithDates } from '../../Extensions/JsonExtensions';\nimport { useRouteParameter } from '../../Hooks/useRouteParameter';\nimport { loadCountryDataAsync } from '../../Services/Management/loadCountryDataAsync';\nimport { publishEnvironmentChangesAsync } from '../../Services/Management/publishEnvironmentChangesAsync';\nimport { CountryDataType } from '../../Services/Management/Types/CountryDataType';\nimport { useStyles } from './Styles';\n\nexport const ManageCountry = () => {\n    const country = useRouteParameter(\"country\");\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState<string>();\n    const [data, setData] = useState<CountryDataType>();\n    const [lastPublishedData, setLastPublishedData] = useState<CountryDataType>();\n\n    useEffect(() => {\n        if (Config.debug) {\n            const item = localStorage.getItem(Config.debugDataKey);\n            if (item) {\n                const newData = parseJsonWithDates(item);\n                setData(newData);\n                setLastPublishedData(merge(newData, {}));\n                return;\n            }\n        } else {\n            localStorage.removeItem(Config.debugCountryKey);\n            localStorage.removeItem(Config.debugDataKey);\n        }\n\n        if (isNil(country)) {\n            setError(Strings.somethingWentWrong);\n\n            return;\n        }\n\n        setIsLoading(true);\n\n        loadCountryDataAsync(country)\n            .onSuccess(data => {\n                if (Config.debug) {\n                    data.environments.forEach(t => t.imageUrlToBase64Map = {});\n                    localStorage.setItem(Config.debugCountryKey, country);\n                    localStorage.setItem(Config.debugDataKey, JSON.stringify(data));\n                }\n\n                setData(data);\n                setLastPublishedData(merge(data, {}));\n            })\n            .onFailure(error => setError(error))\n            .onBoth(_ => setIsLoading(false))\n            .run();\n    }, [country]);\n\n    const applyEnvironmentChange = useCallback((environment: Maybe<EnvironementDataType>, widget: Maybe<WidgetType>, imageBase64: Maybe<string>, widgetPusher: (env: EnvironementDataType) => void, hasChanges: boolean) => {\n        if (isNil(data) || isNil(environment)) {\n            return;\n        }\n\n        if (!isNil(imageBase64) && !isNil(widget)) {\n            const newValue = environment.imageUrlToBase64Map[widget.imageUrl] || {};\n            newValue.value = imageBase64;\n            environment.imageUrlToBase64Map[widget.imageUrl] = newValue;\n        }\n\n        widgetPusher(environment);\n\n        environment.hasChanges = hasChanges;\n\n        const newData = merge(data, {});\n        setData(newData);\n        return newData;\n    }, [data]);\n\n    const onWidgetChanged = useCallback((environmentIndex: number, widgetIndex: number, widget: WidgetType, imageBase64: Maybe<string>) =>\n        applyEnvironmentChange(data?.environments[environmentIndex], widget, imageBase64, t => t.widgets[widgetIndex] = widget, true),\n        [data, applyEnvironmentChange]\n    );\n\n    const onCopyWidget = useCallback((env: string, widget: WidgetType, imageBase64: Maybe<string>) =>\n        applyEnvironmentChange(data?.environments.find(t => t.name === env), widget, imageBase64, t => t.widgets.unshift(widget), true),\n        [data, applyEnvironmentChange]\n    );\n\n    const onDeleteWidget = useCallback((index: number, env: EnvironementDataType) =>\n        applyEnvironmentChange(env, undefined, undefined, t => t.widgets.splice(index, 1), true),\n        [applyEnvironmentChange]\n    );\n\n    const onCreateWidget = useCallback((env: EnvironementDataType, widget: WidgetType, imageBase64: Maybe<string>) =>\n        applyEnvironmentChange(env, widget, imageBase64, t => t.widgets.unshift(widget), true),\n        [applyEnvironmentChange]\n    );\n\n    const onWidgetReordered = useCallback((env: EnvironementDataType, from: number, to: number) =>\n        applyEnvironmentChange(env, undefined, undefined, t => t.widgets.move(from, to), true),\n        [applyEnvironmentChange]\n    );\n\n    const onRevertChanges = useCallback((env: EnvironementDataType) =>\n        applyEnvironmentChange(env, undefined, undefined, t => {\n            const lastPublishedEnvironment = lastPublishedData?.environments.find(t => t.name === env.name);\n\n            if (isNil(lastPublishedEnvironment)) { return; }\n\n            t.widgets = merge(lastPublishedEnvironment.widgets, []);\n            t.imageUrlToBase64Map = merge(lastPublishedEnvironment.imageUrlToBase64Map, {});\n        }, false),\n        [applyEnvironmentChange, lastPublishedData]\n    );\n\n    const onPublishChanges = useCallback((env: EnvironementDataType): Result<void> => {\n        const publishedEnv = lastPublishedData?.environments.find(t => t.name === env.name);\n\n        if (isNil(country) || isNil(publishedEnv) || isNil(data)) {\n            return Result.Fail(Strings.somethingWentWrong);\n        }\n\n        return publishEnvironmentChangesAsync(country, env, publishedEnv)\n            .onSuccess(result => applyEnvironmentChange(env, undefined, undefined, t => {\n                t.sha = result.environmentSha;\n\n                Object.keys(t.imageUrlToBase64Map).forEach(key => {\n                    const newSha = result.imagesUrlToShaMap.get(key);\n                    if (!isNil(newSha)) {\n                        t.imageUrlToBase64Map[key].sha = newSha;\n                    }\n                });\n            }, false))\n            .onSuccess(newData => {\n                if (isNil(newData)) { return; }\n\n                setLastPublishedData(merge(newData, {}));\n            })\n    }, [lastPublishedData, country, data, applyEnvironmentChange]);\n\n    const styles = useStyles();\n\n    return (\n        <Grid container direction=\"column\" className={styles.container}>\n            <ErrorAlert error={error} />\n            <Loader visible={isLoading} />\n            {!isNil(country) && !isNil(data) &&\n                data.environments.map((environment, environmentIndex) => (\n                    <Fragment key={environment.name}>\n                        <Environment\n                            country={country}\n                            {...environment}\n                            onWidgetChanged={(widgetIndex, widget, image64) => onWidgetChanged(environmentIndex, widgetIndex, widget, image64)}\n                            onCopyWidget={onCopyWidget}\n                            onDeleteWidget={index => onDeleteWidget(index, environment)}\n                            onCreateWidget={(widget, image64) => onCreateWidget(environment, widget, image64)}\n                            onWidgetReordered={(from, to) => onWidgetReordered(environment, from, to)}\n                            onRevertChanges={() => onRevertChanges(environment)}\n                            onPublishChangesAsync={() => onPublishChanges(environment)}\n                        />\n                        <Divider />\n                    </Fragment>\n                ))\n            }\n        </Grid>\n    )\n}","import React, { Fragment, useState } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Login } from \"src/Pages/Login/Login\";\nimport { PickRepository } from \"src/Pages/PickRepository/PickRepository\";\nimport { Start } from \"src/Pages/Start/Start\";\nimport { ManageCountry } from \"src/Pages/ManageCountry/ManageCountry\";\n\nexport const Navigation = () => {\n    const [isStarted, setIsStarted] = useState<boolean>(false);\n\n    return (\n        <Router>\n            {!isStarted &&\n                <Start onCompleted={() => setIsStarted(true)} />\n            }\n            {isStarted &&\n                <Fragment>\n                     <Route path={`/login`} component={Login} exact />\n                     <Route path={`/pick`} component={PickRepository} exact />\n                     <Route path={`/manage/country/:country`} component={ManageCountry} exact />\n                </Fragment>\n            }\n        </Router>\n    )\n}","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const Theme = createMuiTheme({\n});","import { CssBaseline, MuiThemeProvider } from '@material-ui/core';\nimport { ConfirmProvider } from 'material-ui-confirm';\nimport { SnackbarProvider } from 'material-ui-snackbar-provider';\nimport React, { Fragment } from 'react';\nimport { Navigation } from './Components/Navigation/Navigation';\nimport { Theme } from './Components/Theme';\n\nexport const App = () => {\n    return (\n        <Fragment>\n            <MuiThemeProvider theme={Theme}>\n                <ConfirmProvider>\n                    <SnackbarProvider SnackbarProps={{ autoHideDuration: 4000, anchorOrigin: { vertical: \"top\", horizontal: \"center\" } }}>\n                        <CssBaseline />\n                        <Navigation />\n                    </SnackbarProvider>\n                </ConfirmProvider>\n            </MuiThemeProvider>\n        </Fragment>\n    );\n}","/* eslint-disable no-extend-native */\nimport { isNil } from 'lodash';\n\ndeclare global {\n    interface Array<T> {\n        compactMap<K>(predicate: (arg: T) => K | undefined, checkForNilOnly?: boolean): K[];\n        move(from: number, to: number): T[];\n    }\n}\n\nArray.prototype.compactMap = function <T, K>(predicate: (arg: T) => K | undefined, checkForNilOnly?: boolean): K[] {\n    const result = new Array<K>();\n\n    this.forEach(item => {\n        const newItem = predicate(item);\n\n        if (checkForNilOnly === true) {\n            if (!isNil(newItem)) {\n                result.push(newItem);\n            }\n        } else {\n            if (newItem) {\n                result.push(newItem);\n            }\n        }\n    });\n\n    return result;\n}\n\nArray.prototype.move = function <T>(from: number, to: number): T[] {\n    this.splice(to, 0, this.splice(from, 1)[0]);\n\n    return this;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './Extensions/ArrayExtensions';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}