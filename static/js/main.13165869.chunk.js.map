{"version":3,"sources":["Services/Management/Models/WidgetAudiences.ts","Components/ErrorAlert/ErrorAlert.tsx","Components/Loader/Styles.ts","Components/Loader/Loader.tsx","Result.ts","Localization/Strings.ts","Services/Management/validateImageAsync.ts","Services/Storage/MemoryStorage.ts","Config.ts","Services/Storage/getStorageItem.ts","Services/Http/sendRequestAsync.ts","Services/Authorization/getUserCredentials.ts","Services/Authorization/Models/CredentialsStorageKey.ts","Services/Http/sendJsonRequestAsync.ts","Services/GitHub/extractCountryName.ts","Services/GitHub/Models/RepositoryNamePrefix.ts","Services/GitHub/Models/ApiRoot.ts","Services/GitHub/fetchRepositoriesAsync.ts","Services/GitHub/isValidRepository.ts","Services/GitHub/Models/RepositoryOwner.ts","Services/Storage/setStorageItem.ts","Services/Authorization/loginAsync.ts","Services/Authorization/setUserCredentials.ts","Services/GitHub/setRepositories.ts","Services/GitHub/Models/RepositoriesStorageKey.ts","Pages/Login/Login.tsx","Pages/PickRepository/PickRepository.tsx","Services/GitHub/getRepositories.ts","Pages/Start/Start.tsx","Components/Divider/Styles.ts","Components/Divider/Divider.tsx","Hooks/useConfirmResult.ts","Services/Management/getLanguages.ts","Services/Management/createWidget.ts","Hooks/useMultilangString.ts","Services/Management/getMultilangStringValue.ts","Services/Management/getEnvironments.ts","Components/WidgetCopier/WidgetCopier.tsx","Services/Management/validateWidgetAsync.ts","Services/Management/arrayBufferToBase64.ts","Services/Management/createImageUrl.ts","Components/DatePicker/DatePicker.tsx","Components/WidgetManagerMultilangField/WidgetManagerMultilangField.tsx","Components/WidgetManager/Styles.ts","Components/WidgetManager/WidgetManager.tsx","Services/Management/convertImageToBase64Async.ts","Components/Widget/Styles.ts","Components/Widget/Widget.tsx","Components/Environment/Styles.ts","Components/Environment/Environment.tsx","Extensions/DateExtensions.ts","Extensions/JsonExtensions.ts","Hooks/useRouteParameter.ts","Services/GitHub/fetchFilesAsync.ts","Services/GitHub/getRepositoryName.ts","Services/Management/getEnvironmentJsonFileName.ts","Services/Management/loadCountryDataAsync.ts","Services/GitHub/persistFileAsync.ts","Services/Management/publishEnvironmentChangesAsync.ts","Services/GitHub/createReleaseAsync.ts","Pages/ManageCountry/Styles.ts","Pages/ManageCountry/ManageCountry.tsx","Components/Navigation/Navigation.tsx","Components/Theme.tsx","App.tsx","Extensions/ArrayExtensions.ts","serviceWorker.ts","index.tsx"],"names":["WidgetAudiences","ErrorAlert","props","isNil","error","Grid","item","Alert","severity","useStyles","makeStyles","theme","backdrop","zIndex","modal","Loader","styles","Backdrop","className","open","visible","CircularProgress","Result","promise","context","_promise","_context","this","timeout","then","value","Promise","resolve","setTimeout","condition","Error","call","reject","ensurer","onSuccess","Ok","Fail","onFailure","_","run","action","execute","ignorePromiseError","arg","catch","prevPromise","errorMessage","message","compensatedValue","void","onFailureCompensate","isExecuted","newError","factory","runAsResult","argument","actionResult","asPromise","undefined","Void","delay","results","promises","map","result","all","factories","joinedResult","forEach","items","concat","isSuccess","times","retryResultAction","retryInternal","FromPromise","retriedTimes","Strings","LocalizedStrings","en","loginTitle","userName","pat","instructions","login","loginFailed","noRepositoriesAvailable","pickRepository","startEditing","somethingWentWrong","save","cancel","title","description","edit","manageWidget","image","removeImage","moreButton","link","audience","availability","fromDate","tillDate","copy","copyWidget","deleteWidget","imageIsNotValid","someFieldsAreEmpty","dateRangeIsInvalid","createWidget","revertChanges","areYouSureToRevert","areYouSureToPublish","publishChanges","areYouSureToDeleteWidget","successfullyPublished","pngImagesOnly","MemoryStorage","Map","Config","version","debug","debugDataKey","debugCountryKey","countries","name","languages","environments","getStorageItem","key","get","localStorage","getItem","removeItem","sendRequestAsync","request","headers","getHeaders","params","method","mode","body","useJsonContentType","JSON","stringify","url","getUrl","path","queryParams","fetch","response","status","ignoreCacheControl","Date","toLocaleString","useAuthorization","createQueryString","keyValues","Object","keys","filter","join","sendJsonRequestAsync","json","extractCountryName","repositoryName","loweredRepositoryName","toLowerCase","t","find","substr","length","toUpperCase","ApiRoot","fetchRepositoriesAsync","repositories","owner","setStorageItem","setItem","set","loginAsync","username","password","btoa","setUserCredentials","withOverridenError","ensure","setRepositories","Login","history","useHistory","useState","isLoading","setIsLoading","setError","setUsername","setPassword","onLogin","useCallback","replace","onBoth","Typography","Dialog","DialogTitle","DialogContent","dividers","container","spacing","direction","TextField","autoFocus","fullWidth","required","label","type","onChange","e","target","DialogActions","Link","href","Button","variant","color","onClick","PickRepository","selectedRepository","setSelectedRepository","useEffect","onSelectRepository","onStartEditing","maybeCountry","RadioGroup","option","FormControlLabel","control","Radio","Start","onCompleted","push","marginTop","marginBottom","Divider","useConfirmResult","confirm","useConfirm","getLanguages","country","createMultilangString","imageUrl","button","langs","reduce","obj","lang","assign","useMultilangString","string","useMemo","defaultLang","values","getMultilangStringValue","getEnvironments","WidgetCopier","onCopy","selectedEnvironment","setSelectedEnvironment","onCopyInner","maxWidth","Select","environemnt","MenuItem","onCancel","validateWidgetAsync","widget","blob","img","Image","src","window","URL","createObjectURL","onload","width","height","onerror","validateImageAsync","allValuesFilled","moment","isBefore","object","every","arrayBufferToBase64","buffer","binary","slice","Uint8Array","b","String","fromCharCode","createImageUrl","shortid","generate","DatePicker","utils","MomentUtils","inputVariant","placeholder","margin","format","date","toDate","invalidDateMessage","maxDateMessage","minDateMessage","clearable","WidgetManagerMultilangField","language","fileUploadContainer","flex","WidgetManager","onSave","onDelete","openCounter","setOpenCounter","workingCopy","setWorkingCopy","imageSource","setImageSource","imageBase64","setImageBase64","confirmAsync","merge","onUpdate","onRemoveImage","onAddImage","files","reader","FileReader","readAsArrayBuffer","convertImageToBase64Async","base64","onSaveInner","onDeleteInner","alignContent","justify","alignItems","accept","wrapper","marginRight","backgroundColor","borderRadius","backgroundSize","backgroundPosition","boxShadow","contentContainer","padding","textAlign","textTransform","fontWeight","paddingTop","buttonContainer","alignSelf","fontSize","textDecoration","buttonLink","actionsContainer","minHeight","containerInactive","opacity","Widget","onChanged","buttonTitle","backgroundImage","availabilityString","utc","isActive","current","isSameOrAfter","isSameOrBefore","containerClass","isManagementOpen","setIsManagementOpen","isCopyOpen","setIsCopyOpen","env","useHover","isHover","hoverProps","Box","style","gutterBottom","environment","widgetsContainer","display","overflowX","overflowY","headerContainer","Environment","snackbar","useSnackbar","onCreateWidget","onRevertChanges","onCopyWidget","onDeleteWidget","onWidgetChanged","onWidgetReordered","onPublishChangesAsync","isWidgetCreationOpen","setIsWidgetCreationOpen","createdWidget","setCreatedWidget","widgetToIdMap","onTriggerCreateWidget","onCreateWidgetInner","getWidgetId","v4","onWidgetReorderedInner","destination","source","index","onRevertChangesInner","onPublishInner","showMessage","hasChanges","onDragEnd","droppableId","provided","ref","innerRef","droppableProps","widgets","draggableId","draggableProps","dragHandleProps","imageUrlToBase64Map","image64","prototype","toJSON","parseLegacy","parse","parseJsonWithDates","text","reviver","parseDate","fetchFilesAsync","getRepositoryName","getEnvironmentJsonFileName","downloadEnvironmentAsync","repository","content","split","downloadRawTextFileAsync","download_url","downloadEnvironmentImagesAsync","sha","convertMapToKeyValueObj","Array","from","imagesInUseSet","add","Set","imagesContent","has","Combine","downloadRawBase64FileAsync","file","downloadedImages","arrayBuffer","persistFileAsync","base64Content","publishEnvironmentChangesAsync","publishedEnvironment","newImages","imagesUrlToShaMap","environmentSha","tag_name","unix","createReleaseAsync","withOverridenValue","ManageCountry","match","useRouteMatch","useRouteParameter","data","setData","lastPublishedData","setLastPublishedData","newData","environmentFileNames","environmentToDataMap","some","x","environemntFiles","compactMap","loadCountryDataAsync","applyEnvironmentChange","widgetPusher","newValue","environmentIndex","widgetIndex","newWidget","unshift","splice","to","move","lastPublishedEnvironment","onPublishChanges","publishedEnv","newSha","updatedLastPublishedData","Navigation","isStarted","setIsStarted","component","exact","Theme","createMuiTheme","App","SnackbarProps","autoHideDuration","anchorOrigin","vertical","horizontal","CssBaseline","predicate","checkForNilOnly","newItem","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.13165869.chunk.js","sourcesContent":["export enum WidgetAudiences {\r\n    broadband = \"BROADBAND\",\r\n    mobile = \"MOBILE\",\r\n    all = \"ALL\",\r\n}","import { Grid } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { isNil } from 'lodash';\r\nimport React, { Fragment } from \"react\";\r\nimport { Maybe } from \"src/Types/Maybe\";\r\n\r\ntype ErrorAlertPropsType = {\r\n    error: Maybe<string>,\r\n}\r\n\r\nexport const ErrorAlert = (props: ErrorAlertPropsType) => {\r\n    return (\r\n        <Fragment>\r\n            {!isNil(props.error) &&\r\n                <Grid item>\r\n                    <Alert severity=\"error\">{props.error}</Alert>\r\n                </Grid>\r\n            }\r\n        </Fragment>\r\n    )\r\n}","import { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.modal + 1,\r\n    }\r\n}));","import { Backdrop, CircularProgress } from '@material-ui/core';\r\nimport React, { Fragment } from 'react';\r\nimport { useStyles } from './Styles';\r\n\r\ntype LoaderPropsType = {\r\n    visible: boolean;\r\n}\r\n\r\nexport const Loader = (props: LoaderPropsType) => {\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <Fragment>\r\n            <Backdrop className={styles.backdrop} open={props.visible}>\r\n                <CircularProgress />\r\n            </Backdrop>\r\n        </Fragment>\r\n    )\r\n}","export type ResultActionType<T, V> = (arg: T) => (V | Promise<V> | Result<V>);\r\nexport type ResultCompleteActionType<T, V> = (arg: Result<T>) => (V | Promise<V> | Result<V>);\r\n\r\nexport class Result<T> {\r\n    private _promise: Promise<T>;\r\n    private _context?: any;\r\n\r\n    constructor(promise: Promise<T>, context?: any) {\r\n        this._promise = promise;\r\n        this._context = context;\r\n    }\r\n\r\n    public asPromise(): Promise<T> {\r\n        return this._promise;\r\n    }\r\n\r\n    public withContext(context: any) {\r\n        this._context = context;\r\n\r\n        return this;\r\n    }\r\n\r\n    public delay(timeout: number) {\r\n        this._promise = this._promise\r\n            .then(value => new Promise(resolve => setTimeout(() => resolve(value), timeout)));\r\n\r\n        return this;\r\n    }\r\n\r\n    public ensure(condition: (arg: T) => boolean, error: string): Result<T> {\r\n        if (!error) {\r\n            throw Error(\"Cannot ensure condition, since error is not defined\")\r\n        }\r\n\r\n        this._promise = this._promise\r\n            .then(value => condition.call(this._context, value) ?\r\n                Promise.resolve(value) :\r\n                Promise.reject(error))\r\n\r\n        return this\r\n    }\r\n\r\n    public ensureAsResult(ensurer: (value: T) => Result<boolean>, error: string): Result<T> {\r\n        return this.onSuccess(value => ensurer(value)\r\n            .onSuccess(condition => condition ? Result.Ok(value) : Result.Fail<T>(error))\r\n            .onFailure(_ => Result.Fail<T>(error))\r\n            .run());\r\n    }\r\n\r\n    public ensureAs<V>(condition: (arg: T) => boolean, error: string, action: ResultActionType<T, V>): Result<V> {\r\n        return this.onSuccess(value => {\r\n            if (condition(value)) {\r\n                return this.execute(action, value);\r\n            }\r\n\r\n            this.ignorePromiseError();\r\n\r\n            return Result.Fail<V>(error);\r\n        });\r\n    }\r\n\r\n    public onSuccess<V>(action: ResultActionType<T, V>): Result<V> {\r\n        const newPromise = this._promise\r\n            .then(value => this.execute(action, value))\r\n\r\n        return new Result(newPromise, this._context);\r\n    }\r\n\r\n    public onSuccessWhen(condition: (arg: T) => boolean, action: ResultActionType<T, T>): Result<T> {\r\n        return this.onSuccess(arg => !!!condition(arg) ? arg : action(arg));\r\n    }\r\n\r\n    public onFailure(action: (arg: string) => void): Result<T> {\r\n        this._promise = this._promise\r\n            .catch(error => {\r\n                action.call(this._context, error);\r\n\r\n                throw error;\r\n            });\r\n\r\n        return this;\r\n    }\r\n\r\n    public onFailureCompensate(action: ResultActionType<string, T>): Result<T> {\r\n        const prevPromise = this._promise;\r\n\r\n        const newPromise = new Promise<T>((resolve, reject) => {\r\n            prevPromise\r\n                .then(value => resolve(value))\r\n                .catch(error => {\r\n                    let errorMessage = `${error}`;\r\n\r\n                    if (error instanceof Error) {\r\n                        errorMessage = error.message;\r\n                    }\r\n\r\n                    return this.execute(action, errorMessage)\r\n                        .then(compensatedValue => resolve(compensatedValue))\r\n                        .catch(error => reject(error))\r\n                });\r\n        });\r\n\r\n        return new Result(newPromise, this._context);\r\n    }\r\n\r\n    public recover(): Result<void> {\r\n        return this.void.onFailureCompensate(_ => undefined);\r\n    }\r\n\r\n    public onBoth<V>(action: ResultCompleteActionType<T, V>): Result<V> {\r\n        let isExecuted = false;\r\n\r\n        return this\r\n            .onSuccess(_ => {\r\n                isExecuted = true;\r\n\r\n                return action.call(this._context, this)\r\n            })\r\n            .onFailureCompensate(error => {\r\n                if (!isExecuted) {\r\n                    return action.call(this._context, this)\r\n                }\r\n\r\n                return Result.Fail(error);\r\n            });\r\n    }\r\n\r\n    public withOverridenValue<V>(value: V): Result<V> {\r\n        return this.onSuccess(_ => Result.Ok(value));\r\n    }\r\n\r\n    public withOverridenError(newError: string): Result<T> {\r\n        return this.onFailureCompensate(_ => Result.Fail(newError, this._context));\r\n    }\r\n\r\n    public withProcessedError(factory: (error: string) => string): Result<T> {\r\n        return this.onFailureCompensate(error => Result.Fail(factory(error), this._context));\r\n    }\r\n\r\n    public run(): Promise<T> {\r\n        return this.runAsResult()._promise;\r\n    }\r\n\r\n    public runAsResult(): Result<T> {\r\n        this.ignorePromiseError();\r\n\r\n        return this;\r\n    }\r\n\r\n    public transformBooleanSuccess(): Result<boolean> {\r\n        return this\r\n            .onSuccess(_ => true)\r\n            .onFailureCompensate(_ => false);\r\n    }\r\n\r\n    public get void(): Result<void> {\r\n        return this.onSuccess(_ => undefined);\r\n    }\r\n\r\n    static Start(context?: any): Result<boolean> {\r\n        return Result.Ok(true, context);\r\n    }\r\n\r\n    static Ok<T>(value: T, context?: any): Result<T> {\r\n        return new Result(Promise.resolve(value), context);\r\n    }\r\n\r\n    static Void(): Result<void> {\r\n        return Result.Ok(undefined);\r\n    }\r\n\r\n    static Delay(timeout: number): Result<void> {\r\n        return Result.Void().delay(timeout);\r\n    }\r\n\r\n    static Fail<T>(error: string, context?: any): Result<T> {\r\n        return new Result(Promise.reject(error), context);\r\n    }\r\n\r\n    static FromPromise<T>(promise: Promise<T>, context?: any): Result<T> {\r\n        return new Result(promise, context);\r\n    }\r\n\r\n    static Combine<T>(results: Result<T>[]): Result<T[]> {\r\n        let promises = results.map(result => result.asPromise());\r\n\r\n        return new Result(Promise.all(promises));\r\n    }\r\n\r\n    static JoinFactories<T>(factories: (() => Result<T>)[]): Result<T[]> {\r\n        let joinedResult = Result.Ok<T[]>([]);\r\n\r\n        factories.forEach(factory => {\r\n            joinedResult = joinedResult\r\n                .onSuccess(items => factory().onSuccess(item => items.concat([item])));\r\n        });\r\n\r\n        return joinedResult;\r\n    }\r\n\r\n    static Create(isSuccess: Boolean, error: string, context?: any): Result<boolean> {\r\n        return isSuccess ?\r\n            Result.Ok(true, context) :\r\n            Result.Fail(error, context);\r\n    }\r\n\r\n    static Retry<T>(times: number, delay: number, retryResultAction: () => Result<T>, context?: any): Result<T> {\r\n        let promise = new Promise<T>((resolve, reject) => {\r\n            retryResultAction()\r\n                .onSuccess(value => resolve(value))\r\n                .onFailure(error => this.retryInternal(times, 0, delay, retryResultAction, error, resolve, reject))\r\n                .run();\r\n        });\r\n\r\n        return Result.FromPromise(promise, context);\r\n    }\r\n\r\n    static Wrap<T>(value: T | null | undefined, error: string): Result<T> {\r\n        return value\r\n            ? Result.Ok(value)\r\n            : Result.Fail<T>(error);\r\n    }\r\n\r\n    private ignorePromiseError<T>() {\r\n        this._promise.catch(_ => { });\r\n    }\r\n\r\n    private execute<T, V>(action: (input: T) => (V | Promise<V> | Result<V>), argument: T): Promise<V> {\r\n        this.run();\r\n\r\n        const actionResult = action.call(this._context, argument)\r\n\r\n        if (actionResult instanceof Promise) {\r\n            return actionResult;\r\n        }\r\n\r\n        if (actionResult instanceof Result) {\r\n            return actionResult.asPromise();\r\n        }\r\n\r\n        return Promise.resolve(actionResult);\r\n    }\r\n\r\n    private static retryInternal<T>(\r\n        times: number,\r\n        retriedTimes: number,\r\n        delay: number,\r\n        retryResultAction: () => Result<T>,\r\n        error: string,\r\n        resolve: (arg: T) => void,\r\n        reject: (arg: string) => void) {\r\n        if (times === retriedTimes) {\r\n            reject(error);\r\n\r\n            return;\r\n        }\r\n\r\n        setTimeout(() =>\r\n            retryResultAction()\r\n                .onSuccess(value => resolve(value))\r\n                .onFailure(_ => this.retryInternal(times, retriedTimes + 1, delay, retryResultAction, error, resolve, reject))\r\n                .run(),\r\n            delay);\r\n    }\r\n}","import LocalizedStrings from 'react-localization';\r\nimport { MaxHeight, MaxWidth, MinHeight, MinWidth } from 'src/Services/Management/validateImageAsync';\r\n\r\nexport const Strings = new LocalizedStrings({\r\n    en: {\r\n        loginTitle: \"Login with your GitHub credentials\",\r\n        userName: \"Username\",\r\n        pat: \"Personal access token\",\r\n        instructions: \"Instructions\",\r\n        login: \"Login\",\r\n        loginFailed: \"Login failed\",\r\n        noRepositoriesAvailable: \"No repositories available\",\r\n        pickRepository: \"Pick repository\",\r\n        startEditing: \"Start editing\",\r\n        somethingWentWrong: \"Something went wrong. Please, try again later\",\r\n        save: \"Save\",\r\n        cancel: \"Cancel\",\r\n        title: \"Title\",\r\n        description: \"Description\",\r\n        edit: \"Edit\",\r\n        manageWidget: \"Manage widget\",\r\n        image: \"Image\",\r\n        removeImage: \"Remove image\",\r\n        moreButton: \"More button\",\r\n        link: \"Link\",\r\n        audience: \"Audience\",\r\n        availability: \"Availability\",\r\n        fromDate: \"From date\",\r\n        tillDate: \"Till date\",\r\n        copy: \"Copy\",\r\n        copyWidget: \"Copy widget to environment\",\r\n        deleteWidget: \"Delete widget\",\r\n        imageIsNotValid: \"Image is not valid\",\r\n        someFieldsAreEmpty: \"Some fields are empty\",\r\n        dateRangeIsInvalid: \"Availability date range is invalid\",\r\n        createWidget: \"Create widget\",\r\n        revertChanges: \"Revert changes\",\r\n        areYouSureToRevert: \"Are you sure you want to revert changes for \",\r\n        areYouSureToPublish: \"Are you sure you want to publish changes for \",\r\n        publishChanges: \"Publish changes\",\r\n        areYouSureToDeleteWidget: \"Are you sure you want to delete this widget?\",\r\n        successfullyPublished: \"Successfully published. Changes will appear in the app shortly\",\r\n        pngImagesOnly: `Format: PNG. Min size: ${MinWidth}x${MinHeight}. Max size: ${MaxWidth}x${MaxHeight}`\r\n    }\r\n});\r\n\r\n","import { Strings } from \"src/Localization/Strings\";\r\nimport { Result } from \"src/Result\";\r\n\r\nexport const MinWidth = 750;\r\nexport const MinHeight = 784;\r\nexport const MaxWidth = 1500;\r\nexport const MaxHeight = 1568;\r\n\r\nexport const validateImageAsync = (blob: Blob) => {\r\n    const promise = new Promise((resolve, reject) => {\r\n        const img = new Image();\r\n        img.src = window.URL.createObjectURL(blob);\r\n        img.onload = () => {\r\n            if (img.width < MinWidth || img.width > MaxWidth || img.height < MinHeight || img.height > MaxHeight) {\r\n                reject();\r\n            } else {\r\n                resolve();\r\n            }\r\n        }\r\n        img.onerror = () => reject();\r\n    });\r\n\r\n    return Result.FromPromise(promise).withOverridenError(Strings.imageIsNotValid);\r\n}","export const MemoryStorage = new Map<string, any>();","export const Config = {\r\n    version: \"1.2.3\",\r\n    debug: false,\r\n    debugDataKey: \"debug_data\",\r\n    debugCountryKey: \"debug_country\",\r\n    countries: [{\r\n        name: \"CH\", \r\n        languages: [\"en\", \"de\", \"it\", \"fr\"],\r\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\r\n    }, {\r\n        name: \"AT\", \r\n        languages: [\"de\"],\r\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\r\n    }, {\r\n        name: \"GB\", \r\n        languages: [\"en\"],\r\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\r\n    }, {\r\n        name: \"NL\", \r\n        languages: [\"nl\"],\r\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\r\n    }, {\r\n        name: \"IE\", \r\n        languages: [\"en\"],\r\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\r\n    }, {\r\n        name: \"BY\", \r\n        languages: [\"by\"],\r\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\r\n    }, {\r\n        name: \"PL\", \r\n        languages: [\"pl\", \"en\"],\r\n        environments: [\"JIT\", \"UAT\", \"PROD\"],\r\n    }]\r\n}","import { Maybe } from 'src/Types/Maybe';\r\nimport { MemoryStorage } from './MemoryStorage';\r\nimport { Config } from 'src/Config';\r\n\r\nexport const getStorageItem = <T extends unknown>(key: string): Maybe<T> => {\r\n    if (Config.debug) {\r\n        return MemoryStorage.get(key) || localStorage.getItem(key) as T;\r\n    } else {\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    return MemoryStorage.get(key);\r\n}","import { Result } from \"src/Result\";\r\nimport { getUserCredentials } from \"../Authorization/getUserCredentials\";\r\nimport { HttpRequestKeyValuesType } from \"./Types/HttpRequestKeyValuesType\";\r\nimport { HttpRequestType } from './Types/HttpRequestType';\r\n\r\nexport const sendRequestAsync = (request: HttpRequestType): Result<Response> => {\r\n    const headers = getHeaders(request);\r\n\r\n    const params: RequestInit = {\r\n        method: request.method,\r\n        headers,\r\n        mode: \"cors\",\r\n    };\r\n\r\n    if (request.body) {\r\n        params.body = request.useJsonContentType\r\n            ? JSON.stringify(request.body)\r\n            : request.body as any;\r\n    }\r\n\r\n    const url = getUrl(request.path, request.queryParams);\r\n\r\n    return Result.FromPromise(fetch(url, params))\r\n        .onSuccess(response => response.status >= 200 && response.status < 300\r\n            ? Result.Ok(response)    \r\n            : Result.Fail(`${response.status}`)\r\n        );\r\n}\r\n\r\nconst getHeaders = (request: HttpRequestType): HttpRequestKeyValuesType => {\r\n    let headers: HttpRequestKeyValuesType = {\r\n        ...request.headers\r\n    };\r\n\r\n    if (request.ignoreCacheControl !== true) {\r\n        headers = { \"If-Modified-Since\": new Date().toLocaleString() };\r\n    }\r\n\r\n    if (request.useJsonContentType) {\r\n        headers = { \"Content-Type\": \"application/json; charset=utf-8\", ...headers };\r\n    }\r\n\r\n    if (request.useAuthorization) {\r\n        headers = { \"Authorization\": `Basic ${getUserCredentials()}`, ...headers };\r\n    }\r\n\r\n    return headers;\r\n}\r\n\r\nconst getUrl = (path: string, queryParams?: HttpRequestKeyValuesType): string => {\r\n    return `${path}${createQueryString(queryParams)}`;\r\n}\r\n\r\nconst createQueryString = (queryParams?: HttpRequestKeyValuesType): string => {\r\n    if (!queryParams) {\r\n        return \"\";\r\n    }\r\n\r\n    const keyValues = Object\r\n        .keys(queryParams)\r\n        .filter(key => queryParams[key] === 'boolean' || !!queryParams[key])\r\n        .map(key => `${key}=${queryParams[key]}`)\r\n        .join('&');\r\n\r\n    return `?${keyValues}`;\r\n}","import { CredentialsStorageKey } from './Models/CredentialsStorageKey';\r\nimport { getStorageItem } from '../Storage/getStorageItem';\r\n\r\nexport const getUserCredentials = () => {\r\n    return getStorageItem(CredentialsStorageKey);\r\n}","export const CredentialsStorageKey = \"credentials\";","import { Result } from \"src/Result\";\r\nimport { HttpRequestType } from './Types/HttpRequestType';\r\nimport { sendRequestAsync } from './sendRequestAsync';\r\n\r\nexport const sendJsonRequestAsync = <T extends unknown>(request: HttpRequestType): Result<T> => {\r\n    return sendRequestAsync(request)\r\n        .onSuccess(response => response.json());\r\n}","import { Maybe } from 'src/Types/Maybe';\r\nimport { Config } from '../../Config';\r\nimport { RepositoryNamePrefix } from './Models/RepositoryNamePrefix';\r\n\r\nexport const extractCountryName = (repositoryName: string): Maybe<string> => {\r\n    const loweredRepositoryName = repositoryName.toLowerCase();\r\n    const availableNames = Config.countries.map(t => `${RepositoryNamePrefix}${t.name}`.toLowerCase());\r\n\r\n    return availableNames.find(t => t === loweredRepositoryName)?.substr(RepositoryNamePrefix.length).toUpperCase();\r\n}","export const RepositoryNamePrefix = \"capp-instantWidgets-\";","export const ApiRoot = \"https://api.github.com/\";","import { sendJsonRequestAsync } from '../Http/sendJsonRequestAsync';\r\nimport { HttpRequestType } from '../Http/Types/HttpRequestType';\r\nimport { isValidRepository } from './isValidRepository';\r\nimport { ApiRoot } from './Models/ApiRoot';\r\nimport { RepositoryOwner } from './Models/RepositoryOwner';\r\nimport { RepositoryType } from './Types/RepositoryType';\r\n\r\nexport const fetchRepositoriesAsync = () => {\r\n    const request: HttpRequestType = {\r\n        path: `${ApiRoot}user/repos?per_page=1000`,\r\n        method: \"GET\",\r\n        useAuthorization: true,\r\n    };\r\n    \r\n    return sendJsonRequestAsync<RepositoryType[]>(request)\r\n        .onSuccess(repositories => repositories.filter(t => isValidRepository(t.name) && t.owner.login === RepositoryOwner));\r\n}","import { isNil } from 'lodash';\r\nimport { extractCountryName } from './extractCountryName';\r\n\r\nexport const isValidRepository = (repositoryName: string) => !isNil(extractCountryName(repositoryName));","export const RepositoryOwner = \"LibertyGlobal\";","import { Config } from 'src/Config';\r\nimport { MemoryStorage } from './MemoryStorage';\r\n\r\nexport const setStorageItem = (key: string, value: any) => {\r\n    if (Config.debug) {\r\n        localStorage.setItem(key, value);\r\n    } else {\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    MemoryStorage.set(key, value)\r\n};","import { Strings } from 'src/Localization/Strings';\r\nimport { Result } from 'src/Result';\r\nimport { fetchRepositoriesAsync } from '../GitHub/fetchRepositoriesAsync';\r\nimport { setRepositories } from '../GitHub/setRepositories';\r\nimport { setUserCredentials } from './setUserCredentials';\r\n\r\nexport const loginAsync = (username: string, password: string): Result<void> => {\r\n    setUserCredentials(username, password);\r\n\r\n    return fetchRepositoriesAsync()\r\n        .withOverridenError(Strings.loginFailed)\r\n        .ensure(repositories => repositories.length > 0, Strings.noRepositoriesAvailable)\r\n        .onSuccess(repositories => setRepositories(repositories))\r\n}","import { setStorageItem } from '../Storage/setStorageItem';\r\nimport { CredentialsStorageKey } from './Models/CredentialsStorageKey';\r\n\r\nexport const setUserCredentials = (username: string, password: string) => {\r\n    return setStorageItem(CredentialsStorageKey, btoa(`${username}:${password}`));\r\n}","import { RepositoryType } from './Types/RepositoryType';\r\nimport { setStorageItem } from '../Storage/setStorageItem';\r\nimport { RepositoriesStorageKey } from './Models/RepositoriesStorageKey';\r\n\r\nexport const setRepositories = (repositories: RepositoryType[]) => {\r\n    setStorageItem(RepositoriesStorageKey, repositories);\r\n}","export const RepositoriesStorageKey = \"Repositories\";","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, Link, TextField, Typography } from '@material-ui/core';\r\nimport React, { Fragment, useCallback, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ErrorAlert } from 'src/Components/ErrorAlert/ErrorAlert';\r\nimport { Loader } from \"src/Components/Loader/Loader\";\r\nimport { Strings } from \"src/Localization/Strings\";\r\nimport { loginAsync } from '../../Services/Authorization/loginAsync';\r\nimport { Config } from 'src/Config';\r\n\r\nexport const Login = () => {\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState<string>();\r\n    const [username, setUsername] = useState<string>(\"\");\r\n    const [password, setPassword] = useState<string>(\"\");\r\n\r\n    const onLogin = useCallback(() => {\r\n        setIsLoading(true);\r\n\r\n        loginAsync(username, password)\r\n            .onFailure(error => setError(error))\r\n            .onSuccess(_ => history.replace(\"/pick\"))\r\n            .onBoth(_ => setIsLoading(false))\r\n            .run();\r\n    }, [password, username, history]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Typography>{Config.version}</Typography>\r\n            <Dialog open>\r\n                <DialogTitle>{Strings.loginTitle}</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <Grid container spacing={2} direction=\"column\">\r\n                        <ErrorAlert error={error} />\r\n                        <Grid item>\r\n                            <TextField\r\n                                autoFocus\r\n                                fullWidth\r\n                                required\r\n                                label={Strings.userName}\r\n                                type=\"text\"\r\n                                onChange={e => setUsername(e.target.value)}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <TextField\r\n                                fullWidth\r\n                                required\r\n                                label={Strings.pat}\r\n                                type=\"password\"\r\n                                onChange={e => setPassword(e.target.value)}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Typography>\r\n                        <Link target=\"_blank\" href=\"https://github.com/instant-widgets-editor/instant-widgets-editor.github.io/blob/master/README.md#instant-widgets-editor\">\r\n                            {Strings.instructions}\r\n                        </Link>\r\n                    </Typography>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={onLogin}>\r\n                        {Strings.login}\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Loader visible={isLoading} />\r\n        </Fragment>\r\n    )\r\n}","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, FormControlLabel, Radio, RadioGroup } from '@material-ui/core';\r\nimport { isNil } from 'lodash';\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Strings } from \"src/Localization/Strings\";\r\nimport { getRepositories } from '../../Services/GitHub/getRepositories';\r\nimport { RepositoryType } from '../../Services/GitHub/Types/RepositoryType';\r\nimport { extractCountryName } from '../../Services/GitHub/extractCountryName';\r\n\r\nexport const PickRepository = () => {\r\n    const history = useHistory();\r\n\r\n    const [repositories, setRepositories] = useState<RepositoryType[]>([]);\r\n    const [selectedRepository, setSelectedRepository] = useState<RepositoryType>();\r\n\r\n    useEffect(() => setRepositories(getRepositories() || []), []);\r\n\r\n    const onSelectRepository = useCallback((name: string) => \r\n        setSelectedRepository(repositories.find(t => t.name === name)), \r\n        [repositories]\r\n    );\r\n\r\n    const onStartEditing = useCallback(() => {\r\n        if (isNil(selectedRepository)) {\r\n            return;\r\n        }\r\n        \r\n        const maybeCountry = extractCountryName(selectedRepository.name);\r\n\r\n        if (!isNil(maybeCountry)) {\r\n            history.replace(`/manage/country/${maybeCountry}`);\r\n        }\r\n    }, [selectedRepository, history]);\r\n\r\n    return (\r\n        <Dialog open>\r\n            <DialogTitle>{Strings.pickRepository}</DialogTitle>\r\n            <DialogContent dividers>\r\n                <RadioGroup\r\n                    onChange={e => onSelectRepository(e.target.value)}\r\n                >\r\n                    {repositories.map(option => (\r\n                        <FormControlLabel\r\n                            value={option.name}\r\n                            key={option.name}\r\n                            control={<Radio />}\r\n                            label={option.name}\r\n                        />\r\n                    ))}\r\n                </RadioGroup>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onStartEditing}>\r\n                    {Strings.startEditing}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import { getStorageItem } from '../Storage/getStorageItem';\r\nimport { RepositoriesStorageKey } from './Models/RepositoriesStorageKey';\r\nimport { RepositoryType } from './Types/RepositoryType';\r\n\r\nexport const getRepositories = () => getStorageItem<RepositoryType[]>(RepositoriesStorageKey);","import { isNil } from 'lodash';\r\nimport React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Loader } from \"src/Components/Loader/Loader\";\r\nimport { Config } from \"src/Config\";\r\n\r\ntype StartPropsType = {\r\n    onCompleted: () => void;\r\n}\r\n\r\nexport const Start = (props: StartPropsType) => {\r\n    const { onCompleted } = props;\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (Config.debug && !isNil(localStorage.getItem(Config.debugCountryKey))) {\r\n            onCompleted();\r\n            history.push(`/manage/country/${localStorage.getItem(Config.debugCountryKey)}`);\r\n            return;\r\n        }\r\n\r\n        history.push(\"/login\");\r\n\r\n        onCompleted();\r\n    }, [onCompleted, history]);\r\n\r\n    return (\r\n        <Loader visible />\r\n    )\r\n}","import { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    container: {\r\n        marginTop: theme.spacing(4),\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n}));","import { Divider as MuiDivider } from '@material-ui/core';\r\nimport React from \"react\";\r\nimport { useStyles } from '../Divider/Styles';\r\n\r\nexport const Divider = () => {\r\n    const styles = useStyles();\r\n\r\n    return (<MuiDivider className={styles.container} />)\r\n}","import { useConfirm } from \"material-ui-confirm\";\r\nimport { useCallback } from 'react';\r\nimport { Result } from \"src/Result\";\r\n\r\nexport const useConfirmResult = () => {\r\n    const confirm = useConfirm();\r\n\r\n    return useCallback((title: string) => Result.FromPromise(confirm({ title })), [confirm]);\r\n}","import { Config } from '../../Config';\r\n\r\nexport const getLanguages = (country: string) =>\r\n    Config.countries.find(t => t.name === country)?.languages || [];","import { getLanguages } from './getLanguages';\r\nimport { WidgetAudiences } from './Models/WidgetAudiences';\r\nimport { MultilangStringType } from './Types/MultilangStringType';\r\nimport { WidgetType } from './Types/WidgetType';\r\n\r\nexport const createWidget = (country: string): WidgetType => {\r\n    const languages = getLanguages(country);\r\n\r\n    return {\r\n        title: createMultilangString(languages),\r\n        description: createMultilangString(languages),\r\n        fromDate: new Date(),\r\n        tillDate: new Date(),\r\n        audience: WidgetAudiences.all,\r\n        imageUrl: \"\",\r\n        button: {\r\n            url: \"\",\r\n            title: createMultilangString(languages),\r\n        }\r\n    }\r\n}\r\n\r\nconst createMultilangString = (langs: string[]): MultilangStringType => {\r\n    return langs.reduce((obj, lang) => Object.assign(obj, { [lang]: \"\" }), {});\r\n}","import { useMemo } from \"react\";\r\nimport { getMultilangStringValue } from \"src/Services/Management/getMultilangStringValue\";\r\nimport { MultilangStringType } from '../Services/Management/Types/MultilangStringType';\r\n\r\nexport const useMultilangString = (country: string, string: MultilangStringType) => useMemo(() => getMultilangStringValue(country, string), [country, string]);","import { isNil } from 'lodash';\r\nimport { Config } from '../../Config';\r\nimport { MultilangStringType } from './Types/MultilangStringType';\r\n\r\nexport const getMultilangStringValue = (country: string, string: MultilangStringType) => {\r\n    const defaultLang = Config.countries.find(t => t.name === country)?.languages[0];\r\n\r\n    return isNil(defaultLang)\r\n        ? Object.values(string)[0]\r\n        : string[defaultLang];\r\n}","import { Config } from '../../Config';\r\n\r\nexport const getEnvironments = (country: string) => \r\n    Config.countries.find(t => t.name === country)?.environments || [];","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, MenuItem, Select } from '@material-ui/core';\r\nimport React, { useCallback, useMemo, useState } from \"react\";\r\nimport { Strings } from \"src/Localization/Strings\";\r\nimport { getEnvironments } from '../../Services/Management/getEnvironments';\r\n\r\ntype WidgetCopierPropsType = {\r\n    country: string,\r\n    open: boolean,\r\n    onCancel: () => void,\r\n    onCopy: (environment: string) => void,\r\n}\r\n\r\nexport const WidgetCopier = (props: WidgetCopierPropsType) => {\r\n    const { onCopy } = props;\r\n\r\n    const environments = useMemo(() => getEnvironments(props.country), [props.country]);\r\n\r\n    const [selectedEnvironment, setSelectedEnvironment] = useState<string>(environments[0]);\r\n\r\n    const onCopyInner = useCallback(() => selectedEnvironment && onCopy(selectedEnvironment), [onCopy, selectedEnvironment]);\r\n\r\n    return (\r\n        <Dialog open={props.open} fullWidth maxWidth=\"sm\">\r\n            <DialogTitle>{Strings.copyWidget}</DialogTitle>\r\n            <DialogContent dividers>\r\n                <Select\r\n                    onChange={e => setSelectedEnvironment(e.target.value as string || environments[0])}\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                >\r\n                    {environments.map(environemnt => <MenuItem key={environemnt} value={environemnt}>{environemnt}</MenuItem>)}\r\n                </Select>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button variant=\"contained\" onClick={props.onCancel}>\r\n                    {Strings.cancel}\r\n                </Button>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onCopyInner}>\r\n                    {Strings.copy}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import { isNil } from 'lodash';\r\nimport moment from 'moment';\r\nimport { Result } from 'src/Result';\r\nimport { Maybe } from 'src/Types/Maybe';\r\nimport { Strings } from '../../Localization/Strings';\r\nimport { KeyValueType } from '../../Types/KeyValueType';\r\nimport { WidgetType } from './Types/WidgetType';\r\nimport { validateImageAsync } from './validateImageAsync';\r\n\r\nexport const validateWidgetAsync = (widget: WidgetType, image: Maybe<Blob>): Result<void> => {\r\n    return Result.Void()\r\n        .onSuccess(_ => image && validateImageAsync(image))\r\n        .onSuccess(_ => allValuesFilled(widget.button.title))\r\n        .onSuccess(_ => allValuesFilled(widget.description))\r\n        .onSuccess(_ => allValuesFilled(widget.title))\r\n        .ensure(_ => moment(widget.fromDate).isBefore(widget.tillDate), Strings.dateRangeIsInvalid)\r\n        .void;\r\n}\r\n\r\nconst allValuesFilled = (object: KeyValueType) => Object.values(object).every(t => !isNil(t) && t.length > 0)\r\n    ? Result.Void()\r\n    : Result.Fail(Strings.someFieldsAreEmpty);","export const arrayBufferToBase64 = (buffer: ArrayBuffer) => {\r\n    let binary = '';\r\n    let bytes = [].slice.call(new Uint8Array(buffer));\r\n\r\n    bytes.forEach((b) => binary += String.fromCharCode(b));\r\n\r\n    return btoa(binary);\r\n}","import shortid from \"shortid\";\r\n\r\nexport const createImageUrl = () => `${shortid.generate()}.png`;","import MomentUtils from '@date-io/moment';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport React, { Fragment } from \"react\";\r\nimport { Grid, Typography } from '@material-ui/core';\r\n\r\ntype DatePickerPropsType = {\r\n    title: string,\r\n    value: Date,\r\n    onChange: (date: Date) => void,\r\n}\r\n\r\nconst DateFormat = \"DD/MM/YYYY\";\r\n\r\nexport const DatePicker = (props: DatePickerPropsType) => {\r\n    return (\r\n        <Fragment>\r\n            <Grid item>\r\n                <Typography variant=\"h6\">{props.title}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                    <KeyboardDatePicker\r\n                        inputVariant=\"outlined\"\r\n                        placeholder={props.title}\r\n                        margin=\"normal\"\r\n                        label={DateFormat}\r\n                        format={DateFormat}\r\n                        value={props.value}\r\n                        onChange={date => props.onChange(date?.toDate() || new Date())}\r\n                        invalidDateMessage=\" \"\r\n                        maxDateMessage=\" \"\r\n                        minDateMessage=\" \"\r\n                        clearable\r\n                        fullWidth\r\n                    />\r\n                </MuiPickersUtilsProvider>\r\n            </Grid>\r\n        </Fragment>\r\n    );\r\n}","import { Grid, TextField, Typography } from '@material-ui/core';\r\nimport { isNil } from 'lodash';\r\nimport React, { useMemo } from \"react\";\r\nimport { getLanguages } from '../../Services/Management/getLanguages';\r\nimport { MultilangStringType } from '../../Services/Management/Types/MultilangStringType';\r\n\r\ntype WidgetManagerMultilangFieldPropsType = {\r\n    country: string,\r\n    label?: string,\r\n    value: MultilangStringType,\r\n    onChange: (value: string, language: string) => void,\r\n}\r\n\r\nexport const WidgetManagerMultilangField = (props: WidgetManagerMultilangFieldPropsType) => {\r\n    const languages = useMemo(() => getLanguages(props.country), [props.country]);\r\n\r\n    return (\r\n        <Grid item container direction=\"column\" spacing={2}>\r\n            {!isNil(props.label) &&\r\n                <Grid item>\r\n                    <Typography variant=\"h6\">{props.label}</Typography>\r\n                </Grid>\r\n            }\r\n            {languages.map(language =>\r\n                <Grid item key={language}>\r\n                    <TextField\r\n                        fullWidth\r\n                        label={language}\r\n                        type=\"text\"\r\n                        variant=\"outlined\"\r\n                        error={props.value[language]?.length === 0}\r\n                        value={props.value[language]}\r\n                        onChange={e => props.onChange(e.target.value, language)}\r\n                    />\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    )\r\n}","import { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    fileUploadContainer: {\r\n        flex: 1,\r\n    },\r\n}));","import { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, MenuItem, Select, TextField, Typography } from '@material-ui/core';\r\nimport merge from 'deepmerge';\r\nimport { isNil } from 'lodash';\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { ErrorAlert } from 'src/Components/ErrorAlert/ErrorAlert';\r\nimport { Strings } from \"src/Localization/Strings\";\r\nimport { validateWidgetAsync } from 'src/Services/Management/validateWidgetAsync';\r\nimport { Maybe } from 'src/Types/Maybe';\r\nimport { useConfirmResult } from '../../Hooks/useConfirmResult';\r\nimport { convertImageToBase64Async } from '../../Services/Management/convertImageToBase64Async';\r\nimport { createImageUrl } from '../../Services/Management/createImageUrl';\r\nimport { WidgetAudiences } from '../../Services/Management/Models/WidgetAudiences';\r\nimport { WidgetType } from '../../Services/Management/Types/WidgetType';\r\nimport { DatePicker } from '../DatePicker/DatePicker';\r\nimport { Divider } from '../Divider/Divider';\r\nimport { WidgetManagerMultilangField } from '../WidgetManagerMultilangField/WidgetManagerMultilangField';\r\nimport { useStyles } from './Styles';\r\n\r\ntype WidgetManagerPropsType = {\r\n    country: string,\r\n    widget: WidgetType,\r\n    open: boolean,\r\n    onCancel: () => void,\r\n    onDelete?: () => void,\r\n    onSave: (widget: WidgetType, imageBase64: Maybe<string>) => void,\r\n}\r\n\r\nexport const WidgetManager = (props: WidgetManagerPropsType) => {\r\n    const { onSave, onDelete } = props;\r\n\r\n    const [openCounter, setOpenCounter] = useState(0);\r\n    const [workingCopy, setWorkingCopy] = useState<WidgetType>(props.widget);\r\n    const [imageSource, setImageSource] = useState<Blob>();\r\n    const [imageBase64, setImageBase64] = useState<string>();\r\n    const [error, setError] = useState<string>();\r\n\r\n    const styles = useStyles();\r\n\r\n    const confirmAsync = useConfirmResult();\r\n\r\n    useEffect(() => {\r\n        setWorkingCopy(merge(props.widget, {}));\r\n        setError(undefined);\r\n    }, [props.widget, openCounter]);\r\n\r\n    useEffect(() => setOpenCounter(t => t + 1), [props.open]);\r\n\r\n    const onUpdate = useCallback((action: (target: WidgetType) => void) => {\r\n        action(workingCopy);\r\n        setWorkingCopy(merge<WidgetType>(workingCopy, {}));\r\n    }, [workingCopy]);\r\n\r\n    const onRemoveImage = useCallback(() => {\r\n        onUpdate(t => t.imageUrl = \"\")\r\n        setImageBase64(undefined);\r\n        setImageSource(undefined);\r\n    }, [onUpdate]);\r\n\r\n    const onAddImage = useCallback((files: FileList | null) => {\r\n        if (isNil(files) || files.length === 0) {\r\n            return;\r\n        }\r\n\r\n        onUpdate(t => t.imageUrl = createImageUrl());\r\n\r\n        setImageSource(files[0]);\r\n\r\n        convertImageToBase64Async(files[0])\r\n            .onSuccess(base64 => {\r\n                setImageBase64(base64);\r\n                setError(undefined);\r\n            })\r\n            .onFailure(error => setError(error))\r\n            .run();\r\n    }, [onUpdate]);\r\n\r\n    const onSaveInner = useCallback(() => {\r\n        validateWidgetAsync(workingCopy, imageSource)\r\n            .onSuccess(_ => onSave(workingCopy, imageBase64))\r\n            .onFailure(error => setError(error))\r\n            .run();\r\n\r\n    }, [onSave, workingCopy, imageBase64, imageSource]);\r\n\r\n    const onDeleteInner = useCallback(() => {\r\n        if (isNil(onDelete)) {\r\n            return;\r\n        }\r\n        \r\n        confirmAsync(Strings.areYouSureToDeleteWidget)\r\n            .onSuccess(_ => onDelete())\r\n            .run();\r\n    }, [confirmAsync, onDelete]);\r\n\r\n    return (\r\n        <Dialog open={props.open} fullWidth maxWidth=\"sm\">\r\n            <DialogTitle>\r\n                {Strings.manageWidget}\r\n                <ErrorAlert error={error} />\r\n            </DialogTitle>\r\n            <DialogContent dividers>\r\n                <Grid container spacing={2} direction=\"column\">\r\n                    <WidgetManagerMultilangField\r\n                        label={Strings.title}\r\n                        value={workingCopy.title}\r\n                        country={props.country}\r\n                        onChange={(value, lang) => onUpdate(t => t.title[lang] = value)}\r\n                    />\r\n                    <Divider />\r\n                    <WidgetManagerMultilangField\r\n                        label={Strings.description}\r\n                        value={workingCopy.description}\r\n                        country={props.country}\r\n                        onChange={(value, lang) => onUpdate(t => t.description[lang] = value)}\r\n                    />\r\n                    <Divider />\r\n                    <Grid item>\r\n                        <Typography variant=\"h6\">{Strings.image}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography color=\"textSecondary\" variant=\"subtitle2\">{Strings.pngImagesOnly}</Typography>\r\n                    </Grid>\r\n                    <Grid item container alignContent=\"center\" justify=\"center\" alignItems=\"center\">\r\n                        <Grid item className={styles.fileUploadContainer}>\r\n                            <input\r\n                                accept=\"image/png\"\r\n                                type=\"file\"\r\n                                onChange={e => onAddImage(e.target.files)}\r\n                            />\r\n                        </Grid>\r\n                        {workingCopy.imageUrl.length > 0 &&\r\n                            <Grid item>\r\n                                <Button variant=\"contained\" color=\"secondary\" onClick={onRemoveImage}>\r\n                                    {Strings.removeImage}\r\n                                </Button>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                    <Divider />\r\n                    <Grid item>\r\n                        <Typography variant=\"h6\">{Strings.moreButton}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            fullWidth\r\n                            label={Strings.link}\r\n                            type=\"text\"\r\n                            variant=\"outlined\"\r\n                            value={workingCopy.button.url}\r\n                            error={workingCopy.button.url.length === 0}\r\n                            onChange={e => onUpdate(t => t.button.url = e.target.value)}\r\n                        />\r\n                    </Grid>\r\n                    <WidgetManagerMultilangField\r\n                        value={workingCopy.button.title}\r\n                        country={props.country}\r\n                        onChange={(value, lang) => onUpdate(t => t.button.title[lang] = value)}\r\n                    />\r\n                    <Divider />\r\n                    <Grid item>\r\n                        <Typography variant=\"h6\">{Strings.audience}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Select\r\n                            value={workingCopy.audience}\r\n                            onChange={e => onUpdate(t => t.audience = e.target.value as WidgetAudiences)}\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                        >\r\n                            {Object.values(WidgetAudiences).map(audience => <MenuItem key={audience} value={audience}>{audience}</MenuItem>)}\r\n                        </Select>\r\n                    </Grid>\r\n                    <Divider />\r\n                    <DatePicker\r\n                        title={Strings.fromDate}\r\n                        value={workingCopy.fromDate}\r\n                        onChange={date => onUpdate(t => t.fromDate = date)}\r\n                    />\r\n                    <Divider />\r\n                    <DatePicker\r\n                        title={Strings.tillDate}\r\n                        value={workingCopy.tillDate}\r\n                        onChange={date => onUpdate(t => t.tillDate = date)}\r\n                    />\r\n                </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {!isNil(props.onDelete) &&\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={onDeleteInner}>\r\n                        {Strings.deleteWidget}\r\n                    </Button>\r\n                }\r\n                <Button variant=\"contained\" onClick={props.onCancel}>\r\n                    {Strings.cancel}\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={onSaveInner}\r\n                >\r\n                    {Strings.save}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}","import { Result } from \"src/Result\";\r\nimport { arrayBufferToBase64 } from './arrayBufferToBase64';\r\n\r\nexport const convertImageToBase64Async = (blob: Blob) => {\r\n    const promise = new Promise<ArrayBuffer>((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsArrayBuffer(blob);\r\n        reader.onload = () => resolve(reader.result as any);\r\n        reader.onerror = error => reject(error);\r\n    })\r\n\r\n    return Result.FromPromise(promise).onSuccess(buffer => arrayBufferToBase64(buffer));\r\n}","import { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    wrapper: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    container: {\r\n        width: 365,\r\n        height: 240,\r\n        backgroundColor: \"black\",\r\n        borderRadius: 8,\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        boxShadow: \"inset 0px -200px 103px -97px rgba(0,0,0,0.95)\"\r\n    },\r\n    contentContainer: {\r\n        padding: theme.spacing(4),\r\n        height: \"100%\",\r\n    },\r\n    title: {\r\n        textAlign: \"center\",\r\n        color: \"white\",\r\n        textTransform: \"uppercase\",\r\n        fontWeight: \"bold\",\r\n    },\r\n    description: {\r\n        textAlign: \"center\",\r\n        color: \"white\",\r\n        paddingTop: theme.spacing(2),\r\n    },\r\n    buttonContainer: {\r\n        alignSelf: \"stretch\",\r\n    },\r\n    button: {\r\n        backgroundColor: \"white\",\r\n        borderRadius: theme.spacing(4),\r\n        color: \"black\",\r\n        padding: theme.spacing(1),\r\n        textAlign: \"center\", \r\n        textTransform: \"uppercase\", \r\n        fontWeight: \"bold\", \r\n        fontSize: 15,\r\n        '&:hover': {\r\n            textDecoration: \"none\",\r\n        },\r\n    },\r\n    buttonLink: {\r\n        color: \"black\",\r\n    },\r\n    actionsContainer: {\r\n        padding: theme.spacing(1),\r\n        minHeight: theme.spacing(10),\r\n    },\r\n    containerInactive: {\r\n        opacity: .2,\r\n    }\r\n}));","import { Box, Button, Grid, Link, Typography } from '@material-ui/core';\r\nimport moment from 'moment';\r\nimport React, { useCallback, useMemo, useState, Fragment } from 'react';\r\nimport useHover from 'react-use-hover';\r\nimport { Strings } from 'src/Localization/Strings';\r\nimport { WidgetType } from 'src/Services/Management/Types/WidgetType';\r\nimport { Maybe } from 'src/Types/Maybe';\r\nimport { useMultilangString } from '../../Hooks/useMultilangString';\r\nimport { WidgetCopier } from '../WidgetCopier/WidgetCopier';\r\nimport { WidgetManager } from '../WidgetManager/WidgetManager';\r\nimport { useStyles } from './Styles';\r\n\r\ntype WidgetPropsType = {\r\n    country: string,\r\n    widget: WidgetType,\r\n    imageBase64: Maybe<string>,\r\n    onChanged: (widget: WidgetType, imageBase64: Maybe<string>) => void,\r\n    onCopy: (env: string, widget: WidgetType, imageBase64: Maybe<string>) => void,\r\n    onDelete: () => void,\r\n};\r\n\r\nexport const Widget = (props: WidgetPropsType) => {\r\n    const { onChanged, onCopy, onDelete } = props;\r\n\r\n    const styles = useStyles();\r\n\r\n    const title = useMultilangString(props.country, props.widget.title);\r\n    const description = useMultilangString(props.country, props.widget.description);\r\n    const buttonTitle = useMultilangString(props.country, props.widget.button.title);\r\n    const backgroundImage = useMemo(() => props.imageBase64 && `url(\"data:image/png;base64,${props.imageBase64}\")`, [props.imageBase64]);\r\n\r\n    const availabilityString = useMemo(() =>\r\n        `${moment.utc(props.widget.fromDate).format(\"ll\")} - ${moment.utc(props.widget.tillDate).format(\"ll\")}`,\r\n        [props.widget.fromDate, props.widget.tillDate]\r\n    );\r\n\r\n    const isActive = useMemo(() => {\r\n        const current = moment.utc();\r\n\r\n        return current.isSameOrAfter(props.widget.fromDate) && current.isSameOrBefore(props.widget.tillDate);\r\n    }, [props.widget.fromDate, props.widget.tillDate]);\r\n\r\n    const containerClass = useMemo(() => `${styles.container} ${isActive ? \"\" : styles.containerInactive}`, [isActive, styles.container, styles.containerInactive]);\r\n\r\n    const [isManagementOpen, setIsManagementOpen] = useState(false);\r\n    const [isCopyOpen, setIsCopyOpen] = useState(false);\r\n\r\n    const onSave = useCallback((widget: WidgetType, imageBase64: Maybe<string>) => {\r\n        onChanged(widget, imageBase64);\r\n        setIsManagementOpen(false);\r\n    }, [onChanged]);\r\n\r\n    const onCopyInner = useCallback((env: string) => {\r\n        onCopy(env, props.widget, props.imageBase64);\r\n        setIsCopyOpen(false);\r\n    }, [onCopy, props.widget, props.imageBase64]);\r\n\r\n    const onDeleteInner = useCallback(() => {\r\n        onDelete();\r\n        setIsManagementOpen(false);\r\n    }, [onDelete]);\r\n\r\n    const [isHover, hoverProps] = useHover();\r\n\r\n    return (\r\n        <Box className={styles.wrapper} {...hoverProps}>\r\n            <Box className={containerClass} style={{ backgroundImage }}>\r\n                <Grid container direction=\"column\" alignItems=\"center\" justify=\"space-between\" className={styles.contentContainer}>\r\n                    <Grid item container alignItems=\"center\" direction=\"column\">\r\n                        <Grid item>\r\n                            <Typography className={styles.title} variant=\"body1\" gutterBottom>{title}</Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography className={styles.description} variant=\"body1\" gutterBottom>{description}</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item className={styles.buttonContainer}>\r\n                        <Typography className={styles.button}>\r\n                            <Link\r\n                                className={styles.buttonLink}\r\n                                target=\"_blank\"\r\n                                href={props.widget.button.url}\r\n                            >\r\n                                {buttonTitle}\r\n                            </Link>\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n            <Grid container className={styles.actionsContainer} spacing={1} alignContent=\"center\" alignItems=\"center\">\r\n                <Grid item>\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">{props.widget.audience}</Typography>\r\n                    <Typography variant=\"subtitle2\" color=\"textSecondary\">{availabilityString}</Typography>\r\n                </Grid>\r\n                {isHover &&\r\n                    <Fragment>\r\n                        <Grid item>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                onClick={() => setIsManagementOpen(true)}\r\n                            >\r\n                                {Strings.edit}\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                onClick={() => setIsCopyOpen(true)}\r\n                            >\r\n                                {Strings.copy}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Fragment>\r\n                }\r\n            </Grid>\r\n            <WidgetManager\r\n                country={props.country}\r\n                widget={props.widget}\r\n                open={isManagementOpen}\r\n                onCancel={() => setIsManagementOpen(false)}\r\n                onSave={onSave}\r\n                onDelete={onDeleteInner}\r\n            />\r\n            <WidgetCopier\r\n                country={props.country}\r\n                open={isCopyOpen}\r\n                onCancel={() => setIsCopyOpen(false)}\r\n                onCopy={environment => onCopyInner(environment)}\r\n            />\r\n        </Box>\r\n    );\r\n}","import { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    widgetsContainer: {\r\n        display: \"flex\",\r\n        overflowX: \"auto\",\r\n        overflowY: \"hidden\",\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    headerContainer: {\r\n        marginTop: theme.spacing(2),\r\n    }\r\n}));","import { Button, Grid, Typography } from '@material-ui/core';\r\nimport { isNil } from 'lodash';\r\nimport { useSnackbar } from 'material-ui-snackbar-provider';\r\nimport React, { Fragment, useCallback, useState } from 'react';\r\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd';\r\nimport { Strings } from 'src/Localization/Strings';\r\nimport { Result } from 'src/Result';\r\nimport { WidgetType } from 'src/Services/Management/Types/WidgetType';\r\nimport { Maybe } from 'src/Types/Maybe';\r\nimport { v4 } from 'uuid';\r\nimport { useConfirmResult } from '../../Hooks/useConfirmResult';\r\nimport { createWidget } from '../../Services/Management/createWidget';\r\nimport { ImageUrlToBase64MapType } from '../../Services/Management/Types/ImageUrlToBase64MapType';\r\nimport { Loader } from '../Loader/Loader';\r\nimport { Widget } from '../Widget/Widget';\r\nimport { WidgetManager } from '../WidgetManager/WidgetManager';\r\nimport { useStyles } from './Styles';\r\n\r\ntype EnvironmentPropsType = {\r\n    country: string,\r\n    hasChanges: boolean,\r\n    name: string,\r\n    widgets: WidgetType[],\r\n    imageUrlToBase64Map: ImageUrlToBase64MapType,\r\n    onWidgetChanged: (index: number, widget: WidgetType, imageBase64: Maybe<string>) => void,\r\n    onCopyWidget: (env: string, widget: WidgetType, imageBase64: Maybe<string>) => void,\r\n    onDeleteWidget: (index: number) => void,\r\n    onCreateWidget: (widget: WidgetType, imageBase64: Maybe<string>) => void,\r\n    onWidgetReordered: (fromIndex: number, toIndex: number) => void,\r\n    onRevertChanges: () => void,\r\n    onPublishChangesAsync: () => Result<void>,\r\n}\r\n\r\nexport const Environment = (props: EnvironmentPropsType) => {\r\n    const confirmAsync = useConfirmResult();\r\n    const snackbar = useSnackbar()\r\n\r\n    const { onCreateWidget, onRevertChanges, onCopyWidget, onDeleteWidget, onWidgetChanged, onWidgetReordered, onPublishChangesAsync } = props;\r\n\r\n    const styles = useStyles();\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isWidgetCreationOpen, setIsWidgetCreationOpen] = useState(false);\r\n    const [createdWidget, setCreatedWidget] = useState<WidgetType>(createWidget(props.country));\r\n\r\n    const [widgetToIdMap] = useState(new Map<WidgetType, string>());\r\n\r\n    const onTriggerCreateWidget = useCallback(() => {\r\n        setCreatedWidget(createWidget(props.country));\r\n        setIsWidgetCreationOpen(true);\r\n    }, [props.country]);\r\n\r\n    const onCreateWidgetInner = useCallback((widget: WidgetType, imageBase64: Maybe<string>) => {\r\n        onCreateWidget(widget, imageBase64)\r\n        setIsWidgetCreationOpen(false);\r\n    }, [onCreateWidget]);\r\n\r\n    const getWidgetId = (widget: WidgetType) => widgetToIdMap.get(widget) || widgetToIdMap.set(widget, v4()).get(widget) || \"\";\r\n\r\n    const onWidgetReorderedInner = useCallback((result: DropResult) => {\r\n        if (isNil(result.destination)) { return; }\r\n        onWidgetReordered(result.source.index, result.destination.index);\r\n    }, [onWidgetReordered]);\r\n\r\n    const onRevertChangesInner = useCallback(() => {\r\n        confirmAsync(`${Strings.areYouSureToRevert} ${props.name}?`)\r\n            .onSuccess(_ => onRevertChanges())\r\n            .run();\r\n    }, [props.name, confirmAsync, onRevertChanges]);\r\n\r\n    const onPublishInner = useCallback(() => {\r\n        confirmAsync(`${Strings.areYouSureToPublish} ${props.name}?`)\r\n            .onSuccess(_ => {\r\n                setIsLoading(true);\r\n\r\n                return onPublishChangesAsync()\r\n                    .onFailure(_ => snackbar.showMessage(Strings.somethingWentWrong));\r\n            })\r\n            .onSuccess(_ => {\r\n                snackbar.showMessage(Strings.successfullyPublished);\r\n            })\r\n            .onBoth(_ => setIsLoading(false))\r\n            .run();\r\n    }, [onPublishChangesAsync, props.name, confirmAsync, snackbar]);\r\n\r\n    return (\r\n        <Grid container direction=\"column\">\r\n            <Grid container item spacing={3} alignContent=\"center\" className={styles.headerContainer}>\r\n                <Grid item>\r\n                    <Typography variant=\"h5\" gutterBottom>{props.name}</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={onTriggerCreateWidget}\r\n                    >\r\n                        {Strings.createWidget}\r\n                    </Button>\r\n                </Grid>\r\n                {props.hasChanges &&\r\n                    <Fragment>\r\n                        <Grid item>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={onPublishInner}\r\n                            >\r\n                                {Strings.publishChanges}\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={onRevertChangesInner}\r\n                            >\r\n                                {Strings.revertChanges}\r\n                            </Button>\r\n                        </Grid>\r\n                    </Fragment>\r\n                }\r\n            </Grid>\r\n            <Grid item>\r\n                <DragDropContext onDragEnd={onWidgetReorderedInner}>\r\n                    <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n                        {provided => (\r\n                            <div ref={provided.innerRef} className={styles.widgetsContainer} {...provided.droppableProps}>\r\n                                {props.widgets.map((widget, index) =>\r\n                                    <Draggable key={getWidgetId(widget)} draggableId={getWidgetId(widget)} index={index}>\r\n                                        {provided => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                            >\r\n                                                <Widget\r\n                                                    key={`${widget.title}-${index}`}\r\n                                                    country={props.country}\r\n                                                    imageBase64={props.imageUrlToBase64Map[widget.imageUrl]?.value || \"\"}\r\n                                                    widget={widget}\r\n                                                    onChanged={(widget, image64) => onWidgetChanged(index, widget, image64)}\r\n                                                    onCopy={(env, widget, image64) => onCopyWidget(env, widget, image64)}\r\n                                                    onDelete={() => onDeleteWidget(index)}\r\n                                                />\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                )}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n            </Grid>\r\n            <WidgetManager\r\n                country={props.country}\r\n                widget={createdWidget}\r\n                open={isWidgetCreationOpen}\r\n                onCancel={() => setIsWidgetCreationOpen(false)}\r\n                onSave={(widget, image64) => onCreateWidgetInner(widget, image64)}\r\n            />\r\n            <Loader visible={isLoading} />\r\n        </Grid >\r\n    );\r\n}","import moment from 'moment';\r\n\r\nexport const JsonDateTimeFormat = \"YYYY-MM-DD HH:mm:ss\";\r\n\r\n// eslint-disable-next-line no-extend-native\r\nDate.prototype.toJSON = function() { \r\n    return moment(this).utc().format(JsonDateTimeFormat).replace(\" \", \"T\"); \r\n}","import moment from 'moment';\r\nimport { JsonDateTimeFormat } from './DateExtensions';\r\n//@ts-ignore\r\nconst parseLegacy = JSON.parse;\r\n\r\nconst parseDate = (key: string, value: any) => {\r\n    if (typeof value !== 'string') {\r\n        return value;\r\n    }\r\n\r\n    const formattedDate = moment.utc(value.replace(\"T\", \" \"), JsonDateTimeFormat).format(JsonDateTimeFormat);\r\n\r\n    if (formattedDate === value) {\r\n        return moment.utc(value, JsonDateTimeFormat).toDate();\r\n    }\r\n\r\n    return value;\r\n};\r\n\r\nexport const parseJsonWithDates = (text: string, reviver?: (key: string, value: any) => any) => {\r\n    return parseLegacy(text, (key, value) => (reviver && reviver(key, value)) || parseDate(key, value))\r\n}\r\n\r\nJSON.parse = parseJsonWithDates;","import { isNil } from \"lodash\";\r\nimport { useRouteMatch } from 'react-router';\r\nimport { useMemo } from 'react';\r\n\r\ntype MatchType = {\r\n    [key: string]: string,\r\n}\r\n\r\nexport const useRouteParameter = (name: string) => {\r\n    const match = useRouteMatch<MatchType>();\r\n    const result = useMemo(() => {\r\n        return isNil(match) || isNil(match.params)\r\n            ? undefined \r\n            : match.params[name]\r\n    }, [match, name]);\r\n\r\n    return result;\r\n}","import { sendJsonRequestAsync } from \"../Http/sendJsonRequestAsync\";\r\nimport { HttpRequestType } from \"../Http/Types/HttpRequestType\";\r\nimport { ApiRoot } from \"./Models/ApiRoot\";\r\nimport { RepositoryOwner } from './Models/RepositoryOwner';\r\nimport { RepositoryContentType } from './Types/RepositoryContentType';\r\n\r\nexport const fetchFilesAsync = (repositoryName: string, path: string) => {\r\n    const request: HttpRequestType = {\r\n        path: `${ApiRoot}repos/${RepositoryOwner}/${repositoryName}/contents/${path}`,\r\n        method: \"GET\",\r\n        useAuthorization: true,\r\n    };\r\n    \r\n    return sendJsonRequestAsync<RepositoryContentType[]>(request);\r\n}","import { RepositoryNamePrefix } from './Models/RepositoryNamePrefix';\r\n\r\nexport const getRepositoryName = (country: string): string => {\r\n    return `${RepositoryNamePrefix}${country.toLowerCase()}`; \r\n}","export const getEnvironmentJsonFileName = (env: string) => `${env}.json`;","import { Strings } from 'src/Localization/Strings';\r\nimport { Result } from 'src/Result';\r\nimport { parseJsonWithDates } from '../../Extensions/JsonExtensions';\r\nimport { fetchFilesAsync } from '../GitHub/fetchFilesAsync';\r\nimport { getRepositoryName } from '../GitHub/getRepositoryName';\r\nimport { RepositoryContentType } from '../GitHub/Types/RepositoryContentType';\r\nimport { sendRequestAsync } from '../Http/sendRequestAsync';\r\nimport { arrayBufferToBase64 } from './arrayBufferToBase64';\r\nimport { getEnvironments } from './getEnvironments';\r\nimport { CountryDataType } from './Types/CountryDataType';\r\nimport { EnvironementDataType } from './Types/EnvironementDataType';\r\nimport { ImageUrlToBase64MapType } from './Types/ImageUrlToBase64MapType';\r\nimport { ImageUrlValueType } from './Types/ImageUrlValueType';\r\nimport { WidgetType } from './Types/WidgetType';\r\nimport { getEnvironmentJsonFileName } from './getEnvironmentJsonFileName';\r\n\r\nexport const loadCountryDataAsync = (country: string): Result<CountryDataType> => {\r\n    const repository = getRepositoryName(country);\r\n    const environments = getEnvironments(country);\r\n    const environmentFileNames = environments.map(t => getEnvironmentJsonFileName(t));\r\n\r\n    const environmentToDataMap = new Map<string, EnvironementDataType>();\r\n\r\n    return fetchFilesAsync(repository, \"\")\r\n        .onSuccess(data => data.filter(t => environmentFileNames.some(x => x === t.name)))\r\n        .onSuccess(environemntFiles => Result\r\n            .Combine(environemntFiles.map(content => downloadEnvironmentAsync(repository, content).onSuccess(data => environmentToDataMap.set(data.name, data))))\r\n            .onSuccess(_ => environments.compactMap(environment => environmentToDataMap.get(environment)))\r\n        )\r\n        .onSuccess((environments): CountryDataType => ({\r\n            country,\r\n            environments,\r\n        }))\r\n        .withOverridenError(Strings.somethingWentWrong);\r\n}\r\n\r\nexport const getEnvironmentFromJsonFileName = (fileName: string) => fileName.split(\".\")[0];\r\n\r\nconst downloadEnvironmentAsync = (repository: string, content: RepositoryContentType): Result<EnvironementDataType> => {\r\n    const environment = getEnvironmentFromJsonFileName(content.name);\r\n\r\n    return downloadRawTextFileAsync(content.download_url)\r\n        .onSuccess(json => parseJsonWithDates(json) as WidgetType[])\r\n        .onFailureCompensate(_ => [])\r\n        .onSuccess(widgets => downloadEnvironmentImagesAsync(repository, environment, widgets)\r\n            .onSuccess((imageUrlToBase64Map): EnvironementDataType => ({\r\n                name: environment,\r\n                sha: content.sha,\r\n                widgets,\r\n                hasChanges: false,\r\n                imageUrlToBase64Map: convertMapToKeyValueObj(imageUrlToBase64Map),\r\n            }))\r\n        );\r\n}\r\n\r\nconst convertMapToKeyValueObj = (map: Map<string, ImageUrlValueType>): ImageUrlToBase64MapType =>\r\n    Array.from(map).reduce((obj, [key, image]) => Object.assign(obj, { [key]: { sha: image.sha, value: image.value } }), {});\r\n\r\nconst downloadEnvironmentImagesAsync = (repository: string, environment: string, widgets: WidgetType[]): Result<Map<string, ImageUrlValueType>> => {\r\n    const imagesInUseSet = widgets.filter(t => t.imageUrl).map(t => t.imageUrl).reduce((result, current) => result.add(current) && result, new Set<string>());\r\n\r\n    return fetchFilesAsync(repository, `images/${environment}`)\r\n        .onFailureCompensate(_ => [])\r\n        .onSuccess(imagesContent => imagesContent.filter(t => imagesInUseSet.has(t.name)))\r\n        .onSuccess(imagesContent => Result\r\n            .Combine(imagesContent.map(t => downloadRawBase64FileAsync(t.download_url).onSuccess(file => ({ name: t.name, value: file, sha: t.sha }))))\r\n            .onSuccess(downloadedImages => {\r\n                const map = new Map<string, ImageUrlValueType>();\r\n\r\n                downloadedImages.forEach((image, index) => map.set(image.name, {\r\n                    value: image.value,\r\n                    sha: image.sha,\r\n                }));\r\n\r\n                return map;\r\n            })\r\n        );\r\n}\r\n\r\nconst downloadRawTextFileAsync = (url: string): Result<string> =>\r\n    sendRequestAsync({ path: url, method: \"GET\", ignoreCacheControl: true, })\r\n        .onSuccess(response => response.text());\r\n\r\nconst downloadRawBase64FileAsync = (url: string): Result<string> =>\r\n    sendRequestAsync({ path: url, method: \"GET\", ignoreCacheControl: true, })\r\n        .onSuccess(response => response.arrayBuffer())\r\n        .onSuccess(buffer => arrayBufferToBase64(buffer));","import { Result } from 'src/Result';\r\nimport { Maybe } from 'src/Types/Maybe';\r\nimport { sendJsonRequestAsync } from '../Http/sendJsonRequestAsync';\r\nimport { HttpRequestType } from '../Http/Types/HttpRequestType';\r\nimport { ApiRoot } from './Models/ApiRoot';\r\nimport { RepositoryOwner } from './Models/RepositoryOwner';\r\n\r\nexport const persistFileAsync = (repositoryName: string, path: string, base64Content: string, sha: Maybe<string>): Result<string> => {\r\n    const request: HttpRequestType = {\r\n        path: `${ApiRoot}repos/${RepositoryOwner}/${repositoryName}/contents/${path}`,\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json; charset=utf-8\"\r\n        },\r\n        body: {\r\n            message: \"Publish changes\",\r\n            content: base64Content,\r\n            sha,\r\n        },\r\n        useAuthorization: true,\r\n        useJsonContentType: true,\r\n    };\r\n\r\n    return sendJsonRequestAsync<PersistResponseType>(request)\r\n        .onSuccess(result => result.content.sha);\r\n}\r\n\r\ntype PersistResponseType = {\r\n    content: {\r\n        sha: string,\r\n    }\r\n};","import { isNil } from 'lodash';\r\nimport { Result } from 'src/Result';\r\nimport { createReleaseAsync } from '../GitHub/createReleaseAsync';\r\nimport { getRepositoryName } from '../GitHub/getRepositoryName';\r\nimport { persistFileAsync } from '../GitHub/persistFileAsync';\r\nimport { getEnvironmentJsonFileName } from './getEnvironmentJsonFileName';\r\nimport { EnvironementDataType } from './Types/EnvironementDataType';\r\n\r\nexport const publishEnvironmentChangesAsync = (country: string, environment: EnvironementDataType, publishedEnvironment: EnvironementDataType): Result<PublishResultType> => {\r\n    const repository = getRepositoryName(country);\r\n    const newImages = environment.widgets.map(t => t.imageUrl).filter(t => !isNil(environment.imageUrlToBase64Map[t]) && isNil(publishedEnvironment.imageUrlToBase64Map[t]));\r\n\r\n    const imagesUrlToShaMap = new Map<string, string>();\r\n\r\n    return Result\r\n        .Combine(newImages\r\n            .map(t => persistFileAsync(repository, `images/${environment.name}/${t}`, environment.imageUrlToBase64Map[t].value, environment.imageUrlToBase64Map[t].sha)\r\n                .onSuccess(sha => imagesUrlToShaMap.set(t, sha))\r\n            )\r\n        )\r\n        .onSuccess(_ => persistFileAsync(repository, getEnvironmentJsonFileName(environment.name), btoa(JSON.stringify(environment.widgets, undefined, 4)), environment.sha))\r\n        .onSuccess(environmentSha => createReleaseAsync(repository, environment.name).withOverridenValue(environmentSha))\r\n        .onSuccess((environmentSha): PublishResultType => ({\r\n            environmentSha,\r\n            imagesUrlToShaMap\r\n        }));\r\n}\r\n\r\ntype PublishResultType = {\r\n    environmentSha: string,\r\n    imagesUrlToShaMap: Map<string, string>,\r\n}","import moment from 'moment';\r\nimport { Result } from 'src/Result';\r\nimport { sendRequestAsync } from '../Http/sendRequestAsync';\r\nimport { HttpRequestType } from '../Http/Types/HttpRequestType';\r\nimport { ApiRoot } from './Models/ApiRoot';\r\nimport { RepositoryOwner } from './Models/RepositoryOwner';\r\n\r\nexport const createReleaseAsync = (repositoryName: string, environment: string): Result<void> => {\r\n    const request: HttpRequestType = {\r\n        path: `${ApiRoot}repos/${RepositoryOwner}/${repositoryName}/releases`,\r\n        method: \"POST\",\r\n        body: {\r\n            tag_name: `${environment}-${moment.utc().unix()}`,\r\n        },\r\n        useAuthorization: true,\r\n        useJsonContentType: true,\r\n    };\r\n    \r\n    return sendRequestAsync(request).void;\r\n}","import { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    container: {\r\n        margin: theme.spacing(4),\r\n    }\r\n}));","import { Grid } from '@material-ui/core';\r\nimport merge from 'deepmerge';\r\nimport { isNil } from 'lodash';\r\nimport React, { Fragment, useCallback, useEffect, useState } from 'react';\r\nimport { Divider } from 'src/Components/Divider/Divider';\r\nimport { Environment } from 'src/Components/Environment/Environment';\r\nimport { ErrorAlert } from 'src/Components/ErrorAlert/ErrorAlert';\r\nimport { Loader } from 'src/Components/Loader/Loader';\r\nimport { Config } from 'src/Config';\r\nimport { Strings } from 'src/Localization/Strings';\r\nimport { Result } from 'src/Result';\r\nimport { EnvironementDataType } from 'src/Services/Management/Types/EnvironementDataType';\r\nimport { WidgetType } from 'src/Services/Management/Types/WidgetType';\r\nimport { Maybe } from 'src/Types/Maybe';\r\nimport { parseJsonWithDates } from '../../Extensions/JsonExtensions';\r\nimport { useRouteParameter } from '../../Hooks/useRouteParameter';\r\nimport { createImageUrl } from '../../Services/Management/createImageUrl';\r\nimport { loadCountryDataAsync } from '../../Services/Management/loadCountryDataAsync';\r\nimport { publishEnvironmentChangesAsync } from '../../Services/Management/publishEnvironmentChangesAsync';\r\nimport { CountryDataType } from '../../Services/Management/Types/CountryDataType';\r\nimport { useStyles } from './Styles';\r\n\r\nexport const ManageCountry = () => {\r\n    const country = useRouteParameter(\"country\");\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState<string>();\r\n    const [data, setData] = useState<CountryDataType>();\r\n    const [lastPublishedData, setLastPublishedData] = useState<CountryDataType>();\r\n\r\n    useEffect(() => {\r\n        if (Config.debug) {\r\n            const item = localStorage.getItem(Config.debugDataKey);\r\n            if (item) {\r\n                const newData = parseJsonWithDates(item);\r\n                setData(newData);\r\n                setLastPublishedData(merge(newData, {}));\r\n                return;\r\n            }\r\n        } else {\r\n            localStorage.removeItem(Config.debugCountryKey);\r\n            localStorage.removeItem(Config.debugDataKey);\r\n        }\r\n\r\n        if (isNil(country)) {\r\n            setError(Strings.somethingWentWrong);\r\n\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n\r\n        loadCountryDataAsync(country)\r\n            .onSuccess(data => {\r\n                if (Config.debug) {\r\n                    data.environments.forEach(t => t.imageUrlToBase64Map = {});\r\n                    localStorage.setItem(Config.debugCountryKey, country);\r\n                    localStorage.setItem(Config.debugDataKey, JSON.stringify(data));\r\n                }\r\n\r\n                setData(data);\r\n                setLastPublishedData(merge(data, {}));\r\n            })\r\n            .onFailure(error => setError(error))\r\n            .onBoth(_ => setIsLoading(false))\r\n            .run();\r\n    }, [country]);\r\n\r\n    const applyEnvironmentChange = useCallback((environment: Maybe<EnvironementDataType>, widget: Maybe<WidgetType>, imageBase64: Maybe<string>, widgetPusher: (env: EnvironementDataType) => void, hasChanges: boolean) => {\r\n        if (isNil(data) || isNil(environment)) {\r\n            return;\r\n        }\r\n\r\n        if (!isNil(imageBase64) && !isNil(widget)) {\r\n            const newValue = environment.imageUrlToBase64Map[widget.imageUrl] || {};\r\n            newValue.value = imageBase64;\r\n            environment.imageUrlToBase64Map[widget.imageUrl] = newValue;\r\n        }\r\n\r\n        widgetPusher(environment);\r\n\r\n        environment.hasChanges = hasChanges;\r\n\r\n        const newData = merge(data, {});\r\n        setData(newData);\r\n        return newData;\r\n    }, [data]);\r\n\r\n    const onWidgetChanged = useCallback((environmentIndex: number, widgetIndex: number, widget: WidgetType, imageBase64: Maybe<string>) =>\r\n        applyEnvironmentChange(data?.environments[environmentIndex], widget, imageBase64, t => t.widgets[widgetIndex] = widget, true),\r\n        [data, applyEnvironmentChange]\r\n    );\r\n\r\n    const onCopyWidget = useCallback((env: string, widget: WidgetType, imageBase64: Maybe<string>) => {\r\n        const newWidget = merge(widget, {});\r\n\r\n        newWidget.imageUrl = isNil(imageBase64) ? \"\" : createImageUrl();\r\n\r\n        applyEnvironmentChange(data?.environments.find(t => t.name === env), newWidget, imageBase64, t => t.widgets.unshift(newWidget), true);\r\n    }, [data, applyEnvironmentChange]);\r\n\r\n    const onDeleteWidget = useCallback((index: number, env: EnvironementDataType) =>\r\n        applyEnvironmentChange(env, undefined, undefined, t => t.widgets.splice(index, 1), true),\r\n        [applyEnvironmentChange]\r\n    );\r\n\r\n    const onCreateWidget = useCallback((env: EnvironementDataType, widget: WidgetType, imageBase64: Maybe<string>) =>\r\n        applyEnvironmentChange(env, widget, imageBase64, t => t.widgets.unshift(widget), true),\r\n        [applyEnvironmentChange]\r\n    );\r\n\r\n    const onWidgetReordered = useCallback((env: EnvironementDataType, from: number, to: number) =>\r\n        applyEnvironmentChange(env, undefined, undefined, t => t.widgets.move(from, to), true),\r\n        [applyEnvironmentChange]\r\n    );\r\n\r\n    const onRevertChanges = useCallback((env: EnvironementDataType) =>\r\n        applyEnvironmentChange(env, undefined, undefined, t => {\r\n            const lastPublishedEnvironment = lastPublishedData?.environments.find(t => t.name === env.name);\r\n\r\n            if (isNil(lastPublishedEnvironment)) { return; }\r\n\r\n            t.widgets = merge(lastPublishedEnvironment.widgets, []);\r\n            t.imageUrlToBase64Map = merge(lastPublishedEnvironment.imageUrlToBase64Map, {});\r\n        }, false),\r\n        [applyEnvironmentChange, lastPublishedData]\r\n    );\r\n\r\n    const onPublishChanges = useCallback((env: EnvironementDataType): Result<void> => {\r\n        const publishedEnv = lastPublishedData?.environments.find(t => t.name === env.name);\r\n\r\n        if (isNil(country) || isNil(publishedEnv) || isNil(data)) {\r\n            return Result.Fail(Strings.somethingWentWrong);\r\n        }\r\n\r\n        return publishEnvironmentChangesAsync(country, env, publishedEnv)\r\n            .onSuccess(result => applyEnvironmentChange(env, undefined, undefined, t => {\r\n                t.sha = result.environmentSha;\r\n\r\n                Object.keys(t.imageUrlToBase64Map).forEach(key => {\r\n                    const newSha = result.imagesUrlToShaMap.get(key);\r\n                    if (!isNil(newSha)) {\r\n                        t.imageUrlToBase64Map[key].sha = newSha;\r\n                    }\r\n                });\r\n            }, false))\r\n            .onSuccess(newData => {\r\n                if (isNil(newData) || isNil(lastPublishedData)) { return; }\r\n\r\n                const updatedLastPublishedData = merge(lastPublishedData, {});\r\n\r\n                updatedLastPublishedData.environments = updatedLastPublishedData.environments\r\n                    .map((t, index) => t.name === env.name \r\n                        ? merge(newData.environments[index], {}) \r\n                        : t\r\n                    );\r\n\r\n                setLastPublishedData(updatedLastPublishedData);\r\n            })\r\n    }, [lastPublishedData, country, data, applyEnvironmentChange]);\r\n\r\n    const styles = useStyles();\r\n\r\n    return (\r\n        <Grid container direction=\"column\" className={styles.container}>\r\n            <ErrorAlert error={error} />\r\n            <Loader visible={isLoading} />\r\n            {!isNil(country) && !isNil(data) &&\r\n                data.environments.map((environment, environmentIndex) => (\r\n                    <Fragment key={environment.name}>\r\n                        <Environment\r\n                            country={country}\r\n                            {...environment}\r\n                            onWidgetChanged={(widgetIndex, widget, image64) => onWidgetChanged(environmentIndex, widgetIndex, widget, image64)}\r\n                            onCopyWidget={onCopyWidget}\r\n                            onDeleteWidget={index => onDeleteWidget(index, environment)}\r\n                            onCreateWidget={(widget, image64) => onCreateWidget(environment, widget, image64)}\r\n                            onWidgetReordered={(from, to) => onWidgetReordered(environment, from, to)}\r\n                            onRevertChanges={() => onRevertChanges(environment)}\r\n                            onPublishChangesAsync={() => onPublishChanges(environment)}\r\n                        />\r\n                        <Divider />\r\n                    </Fragment>\r\n                ))\r\n            }\r\n        </Grid>\r\n    )\r\n}","import React, { Fragment, useState } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Login } from \"src/Pages/Login/Login\";\r\nimport { PickRepository } from \"src/Pages/PickRepository/PickRepository\";\r\nimport { Start } from \"src/Pages/Start/Start\";\r\nimport { ManageCountry } from \"src/Pages/ManageCountry/ManageCountry\";\r\n\r\nexport const Navigation = () => {\r\n    const [isStarted, setIsStarted] = useState<boolean>(false);\r\n\r\n    return (\r\n        <Router>\r\n            {!isStarted &&\r\n                <Start onCompleted={() => setIsStarted(true)} />\r\n            }\r\n            {isStarted &&\r\n                <Fragment>\r\n                     <Route path={`/login`} component={Login} exact />\r\n                     <Route path={`/pick`} component={PickRepository} exact />\r\n                     <Route path={`/manage/country/:country`} component={ManageCountry} exact />\r\n                </Fragment>\r\n            }\r\n        </Router>\r\n    )\r\n}","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport const Theme = createMuiTheme({\r\n});","import { CssBaseline, MuiThemeProvider } from '@material-ui/core';\r\nimport { ConfirmProvider } from 'material-ui-confirm';\r\nimport { SnackbarProvider } from 'material-ui-snackbar-provider';\r\nimport React, { Fragment } from 'react';\r\nimport { Navigation } from './Components/Navigation/Navigation';\r\nimport { Theme } from './Components/Theme';\r\n\r\nexport const App = () => {\r\n    return (\r\n        <Fragment>\r\n            <MuiThemeProvider theme={Theme}>\r\n                <ConfirmProvider>\r\n                    <SnackbarProvider SnackbarProps={{ autoHideDuration: 4000, anchorOrigin: { vertical: \"top\", horizontal: \"center\" } }}>\r\n                        <CssBaseline />\r\n                        <Navigation />\r\n                    </SnackbarProvider>\r\n                </ConfirmProvider>\r\n            </MuiThemeProvider>\r\n        </Fragment>\r\n    );\r\n}","/* eslint-disable no-extend-native */\r\nimport { isNil } from 'lodash';\r\n\r\ndeclare global {\r\n    interface Array<T> {\r\n        compactMap<K>(predicate: (arg: T) => K | undefined, checkForNilOnly?: boolean): K[];\r\n        move(from: number, to: number): T[];\r\n    }\r\n}\r\n\r\nArray.prototype.compactMap = function <T, K>(predicate: (arg: T) => K | undefined, checkForNilOnly?: boolean): K[] {\r\n    const result = new Array<K>();\r\n\r\n    this.forEach(item => {\r\n        const newItem = predicate(item);\r\n\r\n        if (checkForNilOnly === true) {\r\n            if (!isNil(newItem)) {\r\n                result.push(newItem);\r\n            }\r\n        } else {\r\n            if (newItem) {\r\n                result.push(newItem);\r\n            }\r\n        }\r\n    });\r\n\r\n    return result;\r\n}\r\n\r\nArray.prototype.move = function <T>(from: number, to: number): T[] {\r\n    this.splice(to, 0, this.splice(from, 1)[0]);\r\n\r\n    return this;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\nimport './Extensions/ArrayExtensions';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}